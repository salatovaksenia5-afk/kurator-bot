import os
import json
import asyncio
from datetime import datetime, time
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, TextFilter, StateFilter 
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
PORT = int(os.getenv("PORT", 8080))
SHEET_ID = os.getenv("SHEET_ID")
SHEET_TAB = os.getenv("SHEET_TAB", "Users")
ACCESS_CODE = os.getenv("ACCESS_CODE", "1234")
CHAT_LINK_NEWBIE = os.getenv("CHAT_LINK_NEWBIE")
DEADLINE_HOUR = 22
REMIND_HOUR = 14

# ---------------- Google Sheets ----------------
def gs_connect():
    scope = ["https://www.googleapis.com/auth/spreadsheets"]
    creds_json = os.getenv("GOOGLE_CREDENTIALS")
    if not creds_json:
        raise RuntimeError("–ù–µ—Ç GOOGLE_CREDENTIALS!")
    creds_dict = json.loads(creds_json)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    gc = gspread.authorize(creds)
    sheet = gc.open_by_key(SHEET_ID).worksheet(SHEET_TAB)
    return sheet

def gs_set(uid: int, data: dict):
    try:
        sheet = gs_connect()
        all_values = sheet.get_all_values()
        headers = all_values[0]
        user_row = None
        for i, row in enumerate(all_values[1:], start=2):
            if row[0] == str(uid):
                user_row = i
                break
        if not user_row:
            user_row = len(all_values) + 1
            sheet.append_row([str(uid)] + [""]*(len(headers)-1))
        for key, value in data.items():
            if key not in headers:
                sheet.update_cell(1, len(headers)+1, key)
                headers.append(key)
            col = headers.index(key) + 1
            sheet.update_cell(user_row, col, str(value))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

# ---------------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ----------------
USERS = {}

def save_users(users):
    global USERS
    USERS = users

def iso(dt):
    return dt.isoformat()

def now_msk():
    return datetime.now()

class Progress:
    def __init__(self, role=None, name=None, subject=None, guide_index=0, has_read_today=False,
                 task_done_dates=None, last_guide_sent_at=None, allow_letnik=False,
                 final_test_done=False, finished_at=None, hr_chat_link_sent=False, progress=None):
        self.role = role
        self.name = name
        self.subject = subject
        self.guide_index = guide_index
        self.has_read_today = has_read_today
        self.task_done_dates = task_done_dates or []
        self.last_guide_sent_at = last_guide_sent_at
        self.allow_letnik = allow_letnik
        self.final_test_done = final_test_done
        self.finished_at = finished_at
        self.hr_chat_link_sent = hr_chat_link_sent
        self.progress = progress or {}

    def to_dict(self):
        return self.__dict__

def get_user(uid: int) -> Progress:
    key = str(uid)
    if key not in USERS:
        USERS[key] = Progress().to_dict()
        save_users(USERS)
    return Progress(**USERS[key])

def put_user(uid: int, p: Progress):
    USERS[str(uid)] = p.to_dict()
    save_users(USERS)

# ---------------- GUIDES ----------------
GUIDES = {
    "newbie": [
        {"id": "n1", "title": "–ì–∞–π–¥ 1", "url": "https://example.com/1"},
        {"id": "n2", "title": "–ì–∞–π–¥ 2", "url": "https://example.com/2"},
        {"id": "n3", "title": "–ì–∞–π–¥ 3", "url": "https://example.com/3"}
    ],
    "letnik": [
        {"id": "l1", "title": "–ì–∞–π–¥ –ª–µ—Ç–Ω–∏–∫–∞ 1", "url": "https://example.com/l1"},
        {"id": "l2", "title": "–ì–∞–π–¥ –ª–µ—Ç–Ω–∏–∫–∞ 2", "url": "https://example.com/l2"}
    ],
    "tasks_third_by_subject": {
        "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–†–µ—à–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
        "—Ñ–∏–∑–∏–∫–∞": "–†–µ—à–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ñ–∏–∑–∏–∫–µ",
        "—Ö–∏–º–∏—è": "–†–µ—à–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ö–∏–º–∏–∏"
    }
}

# ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------
def kb_role():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–Ø –Ω–æ–≤–∏—á–æ–∫"), KeyboardButton(text="–Ø –ª–µ—Ç–Ω–∏–∫")]], resize_keyboard=True)

def kb_subjects():
    subjects = ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è"]
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=s.title(), callback_data=f"subject:set:{s}")] for s in subjects])

def kb_read_confirm():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –≥–∞–π–¥", callback_data="newbie:read_confirm")]])

def kb_main_newbie(p):
    rows = [[InlineKeyboardButton(text="üìò –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subject:menu")]]
    if p.subject:
        rows.append([InlineKeyboardButton(text="üìñ –û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥", callback_data="newbie:open_guide")])
        rows.append([InlineKeyboardButton(text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ", callback_data="newbie:task_done")])
        rows.append([InlineKeyboardButton(text="üéì –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç", callback_data="final_test")])
    rows.append([InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress:me")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_main_letnik(p):
    rows = [[InlineKeyboardButton(text="üìò –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subject:menu")]]
    if p.allow_letnik:
        rows.append([InlineKeyboardButton(text="‚ö° –í—Å–µ –≥–∞–π–¥—ã –ª–µ—Ç–Ω–∏–∫–∞", callback_data="letnik:all")])
    else:
        rows.append([InlineKeyboardButton(text="üîí –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", callback_data="letnik:code")])
    rows.append([InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress:me")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------------- FSM ----------------
class RegStates(StatesGroup):
    waiting_role = State()
    waiting_name = State()
    waiting_subject = State()
    waiting_letnik_code = State()

# ---------------- –ë–æ—Ç ----------------
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ---------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------------
@dp.message(Command("start"))
async def cmd_start(m: types.Message, state: FSMContext):
    await state.set_state(RegStates.waiting_role)
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=kb_role())

@dp.message(RegStates.waiting_role, Text(equals=["–Ø –Ω–æ–≤–∏—á–æ–∫","–Ø –ª–µ—Ç–Ω–∏–∫"], ignore_case=True))
async def choose_role(m: types.Message, state: FSMContext):
    p = get_user(m.from_user.id)
    p.role = "newbie" if m.text.lower() == "—è –Ω–æ–≤–∏—á–æ–∫" else "letnik"
    put_user(m.from_user.id, p)
    await state.set_state(RegStates.waiting_name)
    await m.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:")

@dp.message(RegStates.waiting_name, F.text.len() >= 3)
async def take_name(m: types.Message, state: FSMContext):
    p = get_user(m.from_user.id)
    p.name = " ".join(m.text.strip().split())
    put_user(m.from_user.id, p)
    await state.set_state(RegStates.waiting_subject)
    await m.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb_subjects())

@dp.callback_query(Text(startswith="subject:set:"))
async def subject_set(cb: types.CallbackQuery):
    s = cb.data.split(":",2)[2]
    p = get_user(cb.from_user.id)
    p.subject = s
    put_user(cb.from_user.id, p)
    try: gs_set(cb.from_user.id, {"–ü—Ä–µ–¥–º–µ—Ç": s})
    except: pass
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    if p.role == "newbie":
        await cb.message.answer(f"üìò –ü—Ä–µ–¥–º–µ—Ç <b>{s}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω", reply_markup=kb_main_newbie(p))
        if CHAT_LINK_NEWBIE and not p.hr_chat_link_sent:
            p.hr_chat_link_sent = True
            put_user(cb.from_user.id, p)
            try: gs_set(cb.from_user.id, {"–í —á–∞—Ç–µ –Ω–æ–≤–∏—á–∫–æ–≤": "—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"})
            except: pass
            await cb.message.answer(f"üëã –°—Å—ã–ª–∫–∞ –≤ —á–∞—Ç –Ω–æ–≤–∏—á–∫–æ–≤: {CHAT_LINK_NEWBIE}")
    else:
        await cb.message.answer(f"üìò –ü—Ä–µ–¥–º–µ—Ç <b>{s}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω", reply_markup=kb_main_letnik(p))

# ---------------- –ù–æ–≤–∏—á–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------
def can_submit_now():
    return now_msk().hour < DEADLINE_HOUR

def _today_iso_date():
    return now_msk().date().isoformat()
def _third_guide_task_for_subject(subject: str) -> str:
    return GUIDES["tasks_third_by_subject"].get(subject or "", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è 3-–≥–æ –≥–∞–π–¥–∞")

async def send_newbie_task(uid: int, p: Progress):
    idx = p.guide_index
    items = GUIDES["newbie"]
    if idx >= len(items):
        await bot.send_message(uid, "üéâ –í—Å–µ –≥–∞–π–¥—ã –ø—Ä–æ–π–¥–µ–Ω—ã.")
        return
    g = items[idx]
    task_text = _third_guide_task_for_subject(p.subject) if g["id"]=="n3" else "–°–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≥–∞–π–¥—É"
    deadline_note = f"–°–¥–∞—Ç—å –¥–æ {DEADLINE_HOUR}:00" if can_submit_now() else "–î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à—ë–ª"
    await bot.send_message(uid, f"üìù –ó–∞–¥–∞–Ω–∏–µ –∫ ¬´{g['title']}¬ª:\n{task_text}\n{deadline_note}")

# ---------------- –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ----------------
@dp.callback_query(Text("newbie:read_confirm"))
async def newbie_mark_read(cb: types.CallbackQuery):
    p = get_user(cb.from_user.id)
    p.has_read_today = True
    put_user(cb.from_user.id, p)
    await cb.message.answer("–ì–∞–π–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π. –í–æ—Ç –∑–∞–¥–∞–Ω–∏–µ:")
    await send_newbie_task(cb.from_user.id, p)
    await cb.answer()

@dp.callback_query(Text("newbie:task_done"))
async def newbie_task_done(cb: types.CallbackQuery):
    p = get_user(cb.from_user.id)
    if not can_submit_now():
        await cb.answer("–ü–æ—Å–ª–µ 22:00 —Å–¥–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üòî", show_alert=True)
        return
    if not p.has_read_today:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –≥–∞–π–¥.", show_alert=True)
        return
    tiso = _today_iso_date()
    if tiso not in p.task_done_dates:
        p.task_done_dates.append(tiso)
    p.guide_index += 1
    p.has_read_today = False
    put_user(cb.from_user.id, p)
    try: gs_set(cb.from_user.id, {f"–ó–∞–¥–∞–Ω–∏–µ {p.guide_index}": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"})
    except: pass
    await cb.message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ù–æ–≤—ã–π –≥–∞–π–¥ –ø—Ä–∏–¥—ë—Ç –ø–æ—Å–ª–µ 08:00 –ø–æ –ú–°–ö.")
    await cb.answer()

# ---------------- –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ----------------
@dp.callback_query(Text("final_test"))
async def final_test(cb: types.CallbackQuery):
    p = get_user(cb.from_user.id)
    if p.role != "newbie":
        await cb.answer("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ‚Äî –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.", show_alert=True)
        return
    p.final_test_done = True
    p.finished_at = iso(now_msk())
    put_user(cb.from_user.id, p)
    try:
        gs_set(cb.from_user.id, {"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç":"‚úì","–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è":_today_iso_date(),"–°—Ç–∞—Ç—É—Å":"–ó–∞–≤–µ—Ä—à–∏–ª –æ–±—É—á–µ–Ω–∏–µ"})
    except: pass
    await cb.message.answer("üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—É—á–µ–Ω–∏–µ. –°–≤—è–∂–∏—Å—å —Å–æ —Å—Ç–∞—Ä—à–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º.")
    await cb.answer()

# ---------------- –ü—Ä–æ–≥—Ä–µ—Å—Å ----------------
@dp.callback_query(Text("progress:me"))
async def progress_me(cb: types.CallbackQuery):
    p = get_user(cb.from_user.id)
    if p.role=="newbie":
        total = len(GUIDES["newbie"])
        done = min(p.guide_index,total)
        await cb.message.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–æ–≤–∏—á–∫–∞:\n–ü—Ä–µ–¥–º–µ—Ç: {p.subject}\n–ì–∞–π–¥—ã –ø—Ä–æ–π–¥–µ–Ω—ã: {done}/{total}\n–ó–∞–¥–∞–Ω–∏–π —Å–¥–∞–Ω–æ: {len(p.task_done_dates)}")
    else:
        await cb.message.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ª–µ—Ç–Ω–∏–∫–∞:\n–ü—Ä–µ–¥–º–µ—Ç: {p.subject}\n–î–æ—Å—Ç—É–ø –∫ –≥–∞–π–¥–∞–º: {'–¥–∞' if p.allow_letnik else '–Ω–µ—Ç'}")
    await cb.answer()

# ---------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------------
async def scheduler_loop():
    while True:
        now = now_msk()
        for uid, raw in list(USERS.items()):
            p = Progress(**raw)
            if p.role != "newbie": continue
            today = now.date()
            if not p.last_guide_sent_at or datetime.fromisoformat(p.last_guide_sent_at).date()!=today:
                if now.hour>=8:
                    idx = p.guide_index
                    items = GUIDES["newbie"]
                    if idx<len(items):
                        g = items[idx]
                        await bot.send_message(int(uid), f"üìò –ì–∞–π–¥ {g['title']}: {g['url']}")
                        p.last_guide_sent_at = iso(now)
                        put_user(uid, p)
            if now.hour==REMIND_HOUR and now.minute==0:
                await bot.send_message(int(uid), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ {DEADLINE_HOUR}:00")
        await asyncio.sleep(60)

# ---------------- –í–µ–±-—Å–µ—Ä–≤–µ—Ä ----------------
async def handle_root(request): return web.Response(text="kurator-bot ok")
async def handle_health(request): return web.json_response({"status":"ok","ts":iso(now_msk())})
async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/", handle_root), web.get("/health", handle_health)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner,"0.0.0.0",PORT)
    await site.start()

# ---------------- Main ----------------
async def main():
    await bot.delete_webhook()
    await asyncio.gather(start_web_app(), dp.start_polling(bot, skip_updates=True), scheduler_loop())

if __name__=="__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped by user")


    






