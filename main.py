import os
import asyncio
import json
from datetime import datetime, timedelta, time, timezone

from aiohttp import web

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

# -----------------------
# –ù–ê–°–¢–†–û–ô–ö–ò / –ö–û–ù–°–¢–ê–ù–¢–´
# -----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ—Ç BOT_TOKEN. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Render.")

ADMIN_ID = int(os.getenv("ADMIN_ID", "0") or "0")  # —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º ID, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
TIMEZONE = timezone(timedelta(hours=3))  # –ú–°–ö
REMIND_HOUR = 22  # 22:00 –ú–°–ö
PORT = int(os.getenv("PORT", "10000"))  # Render –æ—Ç–¥–∞—ë—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ $PORT

DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
GUIDES_FILE = os.path.join(DATA_DIR, "guides.json")

os.makedirs(DATA_DIR, exist_ok=True)

# -----------------------
# –ü–ê–ú–Ø–¢–¨ (–ø—Ä–æ—Å—Ç–∞—è JSON "–ë–î")
# -----------------------
def _read_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return default
    except Exception:
        return default

def _write_json(path: str, payload):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(payload, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)

def load_users():
    data = _read_json(USERS_FILE, {})
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    for uid, u in data.items():
        u.setdefault("role", "newbie")           # newbie / letnik
        u.setdefault("subject", None)            # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        u.setdefault("guide_index", 0)           # –∫–∞–∫–æ–π –≥–∞–π–¥ –ø–æ –æ—á–µ—Ä–µ–¥–∏ (–Ω–æ–≤–∏—á–∫—É)
        u.setdefault("last_guide_sent_at", None) # ISO —Å—Ç—Ä–æ–∫–∞ –ú–°–ö
        u.setdefault("progress", {})             # {guide_id: {"read": bool, "task_done": bool}}
        u.setdefault("created_at", datetime.now(TIMEZONE).isoformat())
    return data

def save_users(data):
    _write_json(USERS_FILE, data)

def load_guides():
    data = _read_json(GUIDES_FILE, {})
    # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–æ—Ç —Ç–∞–∫–∞—è:
    # {
    #   "newbie": [ {"id":"n1","title":"...","url":"..."},
    #               {"id":"n2","title":"...","url":"..."}],
    #   "letnik": [ {"id":"l1","title":"...","url":"..."} ],
    #   "subjects": ["–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞","—Ñ–∏–∑–∏–∫–∞","—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫","–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ","–±–∏–æ–ª–æ–≥–∏—è","—Ö–∏–º–∏—è"]
    # }
    if not data:
        # –∑–∞–≥–ª—É—à–∫–∏
        data = {
            "newbie": [
                {"id": "n1", "title": "–û—Å–Ω–æ–≤—ã –∏ —ç—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)", "url": "https://example.com/newbie-1"},
                {"id": "n2", "title": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å (–∑–∞–≥–ª—É—à–∫–∞)", "url": "https://example.com/newbie-2"},
                {"id": "n3", "title": "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–∑–∞–≥–ª—É—à–∫–∞)", "url": "https://example.com/newbie-3"},
            ],
            "letnik": [
                {"id": "l1", "title": "–ì–∞–π–¥ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤ 1 (–∑–∞–≥–ª—É—à–∫–∞)", "url": "https://example.com/letnik-1"},
                {"id": "l2", "title": "–ì–∞–π–¥ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤ 2 (–∑–∞–≥–ª—É—à–∫–∞)", "url": "https://example.com/letnik-2"},
                {"id": "l3", "title": "–ì–∞–π–¥ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤ 3 (–∑–∞–≥–ª—É—à–∫–∞)", "url": "https://example.com/letnik-3"},
            ],
            "subjects": ["–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–±–∏–æ–ª–æ–≥–∏—è", "—Ö–∏–º–∏—è"]
        }
        _write_json(GUIDES_FILE, data)
    return data

USERS = load_users()
GUIDES = load_guides()

# -----------------------
# –ë–û–¢
# -----------------------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def kb_main(role: str):
    rows = []
    rows.append([InlineKeyboardButton(text="üìö –í—Å–µ –≥–∞–π–¥—ã", callback_data="guides:menu")])
    rows.append([
        InlineKeyboardButton(text="üß≠ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress:me"),
        InlineKeyboardButton(text="üì® –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="task:done")
    ])
    if role == "newbie":
        rows.append([InlineKeyboardButton(text="üïó –ú–æ–π –≥—Ä–∞—Ñ–∏–∫ –≥–∞–π–¥–æ–≤", callback_data="newbie:schedule")])
    if role == "letnik":
        rows.append([InlineKeyboardButton(text="‚ö° –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –≥–∞–π–¥—ã", callback_data="letnik:all")])
    rows.append([InlineKeyboardButton(text="üìò –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subject:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_subjects():
    btns = []
    for s in GUIDES["subjects"]:
        btns.append([InlineKeyboardButton(text=s.title(), callback_data=f"subject:set:{s}")])
    return InlineKeyboardMarkup(inline_keyboard=btns)

def kb_guides_list(role: str):
    items = GUIDES["newbie"] if role == "newbie" else GUIDES["letnik"]
    rows = []
    for g in items:
        rows.append([InlineKeyboardButton(text=g["title"], url=g["url"])])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_yes_no(cb_yes: str, cb_no: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=cb_yes),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data=cb_no)]
    ])

# —É—Ç–∏–ª–∏—Ç—ã
def user(u: Message|CallbackQuery):
    uid = (u.from_user.id if isinstance(u, Message) else u.from_user.id)
    if str(uid) not in USERS:
        USERS[str(uid)] = {
            "role": "newbie",
            "subject": None,
            "guide_index": 0,
            "last_guide_sent_at": None,
            "progress": {},
            "created_at": datetime.now(TIMEZONE).isoformat()
        }
        save_users(USERS)
    return USERS[str(uid)]

def is_after_8_msk(dt: datetime):
    return dt.astimezone(TIMEZONE).time() >= time(8, 0)

async def send_newbie_next_guide(uid: int):
    u = USERS.get(str(uid))
    if not u or u.get("role") != "newbie":
        return
    idx = u.get("guide_index", 0)
    items = GUIDES["newbie"]
    if idx >= len(items):
        await bot.send_message(uid, "üéâ –í—Å–µ –≥–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–µ—Ç–Ω–∏–∫ —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.")
        return
    g = items[idx]
    await bot.send_message(
        uid,
        f"üìò –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≥–∞–π–¥: <b>{g['title']}</b>\n–°—Å—ã–ª–∫–∞: {g['url']}\n\n"
        f"–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫ 22:00 –ø–æ –ú–°–ö."
    )
    u["last_guide_sent_at"] = datetime.now(TIMEZONE).isoformat()
    save_users(USERS)

async def send_letnik_all(uid: int):
    rows = []
    for g in GUIDES["letnik"]:
        rows.append(f"‚Ä¢ <b>{g['title']}</b> ‚Äî {g['url']}")
    text = "‚ö° –í—Å–µ –≥–∞–π–¥—ã –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤:\n\n" + "\n".join(rows)
    await bot.send_message(uid, text)

# -----------------------
# –•–ï–ù–î–õ–ï–†–´
# -----------------------
@dp.message(CommandStart())
async def start(message: Message):
    u = user(message)
    await message.answer(
        "–ø—Ä–∏–≤–µ—Ç! —è –±–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä.\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –Ø –Ω–æ–≤–∏—á–æ–∫", callback_data="role:newbie")],
            [InlineKeyboardButton(text="üü† –Ø –ª–µ—Ç–Ω–∏–∫", callback_data="role:letnik")]
        ])
    )

@dp.callback_query(F.data.startswith("role:"))
async def set_role(cb: CallbackQuery):
    r = cb.data.split(":")[1]
    u = user(cb)
    u["role"] = r
    save_users(USERS)
    if r == "newbie":
        await cb.message.answer(
            "–ì–æ—Ç–æ–≤–æ! –¢—ã –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ <b>–Ω–æ–≤–∏—á–æ–∫</b>.\n"
            "–ì–∞–π–¥—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ 08:00 –ú–°–ö.",
            reply_markup=kb_main("newbie")
        )
    else:
        await cb.message.answer(
            "–ì–æ—Ç–æ–≤–æ! –¢—ã <b>–ª–µ—Ç–Ω–∏–∫</b>.\n"
            "–ú–æ–≥—É –≤—ã—Å–ª–∞—Ç—å –≤—Å–µ –≥–∞–π–¥—ã —Å—Ä–∞–∑—É. –ù–∞ —Ç–µ—Å—Ç ‚Äî —Å—É—Ç–∫–∏.",
            reply_markup=kb_main("letnik")
        )
    await cb.answer()

@dp.callback_query(F.data == "guides:menu")
async def guides_menu(cb: CallbackQuery):
    u = user(cb)
    role = u["role"]
    await cb.message.answer(
        "–∫–∞—Ç–∞–ª–æ–≥ –≥–∞–π–¥–æ–≤:",
        reply_markup=kb_guides_list(role)
    )
    await cb.answer()

@dp.callback_query(F.data == "progress:me")
async def my_progress(cb: CallbackQuery):
    u = user(cb)
    prog = u.get("progress", {})
    role = u["role"]
    items = GUIDES["newbie"] if role == "newbie" else GUIDES["letnik"]
    lines = []
    for g in items:
        st = prog.get(g["id"], {"read": False, "task_done": False})
        emoji = "‚úÖ" if st.get("task_done") else ("üìñ" if st.get("read") else "‚è≥")
        lines.append(f"{emoji} {g['title']}")
    if not lines:
        lines = ["–ø–æ–∫–∞ –ø—É—Å—Ç–æ"]
    subj = u.get("subject") or "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    await cb.message.answer("üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n" + "\n".join(lines) + f"\n\n–ü—Ä–µ–¥–º–µ—Ç: <b>{subj}</b>")
    await cb.answer()

@dp.callback_query(F.data == "task:done")
async def task_done(cb: CallbackQuery):
    u = user(cb)
    role = u["role"]
    items = GUIDES["newbie"] if role == "newbie" else GUIDES["letnik"]
    # –ø–æ–º–µ—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã—Å–ª–∞–Ω–Ω—É—é / —Ç–µ–∫—É—â—É—é
    idx = u.get("guide_index", 0)
    guide = None
    if role == "newbie":
        # –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ —Ç–µ–∫—É—â–∏–π ‚Äî –ø–æ –∏–Ω–¥–µ–∫—Å—É (–Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ –∞–≤—Ç–æ–º–∞—Ç–æ–º, –ø–æ–∫–∞ –Ω–µ 8 —É—Ç—Ä–∞)
        if idx < len(items):
            guide = items[idx]
    else:
        # –¥–ª—è –ª–µ—Ç–Ω–∏–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è –Ω–µ –≤–µ–¥—ë–º ‚Äî –æ—Ç–º–µ—Ç–∏–º –ª—é–±—É—é ¬´–∞–∫—Ç–∏–≤–Ω—É—é¬ª –∫–∞–∫ l1
        guide = items[0] if items else None

    if not guide:
        await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ—á–∞—Ç—å.")
        await cb.answer()
        return

    prog = u.setdefault("progress", {})
    gstat = prog.setdefault(guide["id"], {"read": True, "task_done": False})
    gstat["read"] = True
    gstat["task_done"] = True
    save_users(USERS)
    await cb.message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ ¬´{guide['title']}¬ª –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!")
    await cb.answer()

@dp.callback_query(F.data == "newbie:schedule")
async def newbie_schedule(cb: CallbackQuery):
    u = user(cb)
    idx = u.get("guide_index", 0)
    items = GUIDES["newbie"]
    left = max(0, len(items) - idx)
    await cb.message.answer(
        f"üïó –ì–∞–π–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ 08:00 –ú–°–ö.\n–û—Å—Ç–∞–ª–æ—Å—å –≥–∞–π–¥–æ–≤: <b>{left}</b>."
    )
    await cb.answer()

@dp.callback_query(F.data == "letnik:all")
async def letnik_all(cb: CallbackQuery):
    u = user(cb)
    if u["role"] != "letnik":
        await cb.answer("–≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤", show_alert=True)
        return
    await send_letnik_all(cb.from_user.id)
    await cb.answer()

@dp.callback_query(F.data == "subject:menu")
async def subject_menu(cb: CallbackQuery):
    await cb.message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb_subjects())
    await cb.answer()

@dp.callback_query(F.data.startswith("subject:set:"))
async def subject_set(cb: CallbackQuery):
    s = cb.data.split(":")[2]
    u = user(cb)
    u["subject"] = s
    save_users(USERS)
    await cb.message.answer(f"üìò –ü—Ä–µ–¥–º–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <b>{s}</b>")
    await cb.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if ADMIN_ID and message.from_user.id != ADMIN_ID:
        return
    newbies = [u for u in USERS.values() if u["role"] == "newbie"]
    letniki = [u for u in USERS.values() if u["role"] == "letnik"]
    total = len(USERS)
    lines = [
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}",
        f"üü¢ –ù–æ–≤–∏—á–∫–æ–≤: {len(newbies)}",
        f"üü† –õ–µ—Ç–Ω–∏–∫–æ–≤: {len(letniki)}",
        "",
        "‚Äî –¢–æ–ø 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    ]
    last = sorted(USERS.items(), key=lambda kv: kv[1].get("created_at", ""), reverse=True)[:10]
    for uid, u in last:
        subj = u.get("subject") or "‚Äî"
        lines.append(f"{uid}: {u['role']}, –ø—Ä–µ–¥–º–µ—Ç: {subj}, –∏–Ω–¥–µ–∫—Å –≥–∞–π–¥–∞: {u.get('guide_index',0)}")
    await message.answer("\n".join(lines))

# -----------------------
# –†–ê–°–ü–ò–°–ê–ù–ò–ï / –ó–ê–î–ê–ß–ò
# -----------------------
async def scheduler_loop():
    """
    1) –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ 08:00 –ú–°–ö ‚Äî –Ω–æ–≤–∏—á–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ (–µ—Å–ª–∏ –≤—á–µ—Ä–∞—à–Ω–∏–π –±—ã–ª –≤—ã—Å–ª–∞–Ω).
    2) –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00 –ú–°–ö ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º –æ —Å–¥–∞—á–µ –∑–∞–¥–∞–Ω–∏—è.
    3) –õ–µ—Ç–Ω–∏–∫–∞–º ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ ¬´—Å—É—Ç–∫–∏ –Ω–∞ —Ç–µ—Å—Ç¬ª (–µ—Å–ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞—Ö–æ–¥–∏–ª–∏/–ø–æ–ª—É—á–∞–ª–∏ –≥–∞–π–¥—ã).
    4) –ï—Å–ª–∏ –±–æ—Ç ¬´–≤—Å—Ç–∞–≤–∞–ª¬ª –∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —É—Ç—Ä–æ ‚Äî –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –¥–æ–≥–æ–Ω–∏–º (–µ—Å–ª–∏ >08:00).
    """
    await asyncio.sleep(3)  # –º–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    # ¬´–¥–æ–≥–æ–Ω—è–µ–º¬ª —É—Ç—Ä–æ, –µ—Å–ª–∏ –±–æ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–∞–Ω—É–ª –ø–æ—Å–ª–µ 08:00
    now = datetime.now(TIMEZONE)
    if is_after_8_msk(now):
        # –≤—ã–¥–∞–¥–∏–º —Ç–µ–º –Ω–æ–≤–∏—á–∫–∞–º, –∫–æ–º—É —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –≤—ã—Å—ã–ª–∞–ª–∏
        for uid, u in USERS.items():
            if u.get("role") != "newbie":
                continue
            last = u.get("last_guide_sent_at")
            last_date = None
            if last:
                try:
                    last_date = datetime.fromisoformat(last).astimezone(TIMEZONE).date()
                except Exception:
                    last_date = None
            if last_date == now.date():
                continue  # —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Å—ã–ª–∞–ª–∏
            try:
                await send_newbie_next_guide(int(uid))
            except Exception:
                pass

    while True:
        try:
            now = datetime.now(TIMEZONE)

            # 08:00 ‚Äî –≤—ã–¥–∞—á–∞ –Ω–æ–≤–∏—á–∫–∞–º –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞ (–ø–æ –æ–¥–Ω–æ–º—É –≤ –¥–µ–Ω—å)
            if now.time().hour == 8 and now.time().minute == 0:
                for uid, u in USERS.items():
                    if u.get("role") != "newbie":
                        continue
                    # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
                    last = u.get("last_guide_sent_at")
                    last_date = None
                    if last:
                        try:
                            last_date = datetime.fromisoformat(last).astimezone(TIMEZONE).date()
                        except Exception:
                            last_date = None
                    if last_date == now.date():
                        continue
                    await send_newbie_next_guide(int(uid))

            # 22:00 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –Ω–æ–≤–∏—á–∫–∞–º
            if now.time().hour == REMIND_HOUR and now.time().minute == 0:
                for uid, u in USERS.items():
                    if u.get("role") == "newbie":
                        await bot.send_message(int(uid), "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: c–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ 22:00 –ø–æ –ú–°–ö!")
                    elif u.get("role") == "letnik":
                        await bot.send_message(int(uid), "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è —Å—É—Ç–∫–∏ –Ω–∞ —Ç–µ—Å—Ç. –ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π!")

            await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except asyncio.CancelledError:
            break
        except Exception:
            await asyncio.sleep(5)

# -----------------------
# –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER
# -----------------------
async def handle_root(request):
    return web.Response(text="kurator-bot ok")

async def handle_health(request):
    return web.json_response({"status": "ok", "ts": datetime.now(TIMEZONE).isoformat()})

async def start_web_app():
    app = web.Application()
    app.add_routes([
        web.get("/", handle_root),
        web.get("/health", handle_health),
    ])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

# -----------------------
# MAIN
# -----------------------
async def main():
    # –ø–æ–¥–Ω–∏–º–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π http-—Å–µ—Ä–≤–µ—Ä (—á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç)
    await start_web_app()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    asyncio.create_task(scheduler_loop())

    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass

