import os
import asyncio
import json
from datetime import datetime, timedelta, time, timezone

from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

# -----------------------
# –ù–ê–°–¢–†–û–ô–ö–ò / –ö–û–ù–°–¢–ê–ù–¢–´
# -----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ—Ç BOT_TOKEN. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Render.")

ADMIN_ID = int(os.getenv("ADMIN_ID", "0") or "0")  # ID –∞–¥–º–∏–Ω–∞
TIMEZONE = timezone(timedelta(hours=3))  # –ú–°–ö
REMIND_HOURS = [14, 21]  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 14:00 –∏ 21:00
PORT = int(os.getenv("PORT", "10000"))

DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
GUIDES_FILE = os.path.join(DATA_DIR, "guides.json")

os.makedirs(DATA_DIR, exist_ok=True)

# -----------------------
# –ü–ê–ú–Ø–¢–¨ (JSON "–ë–î")
# -----------------------
def _read_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return default
    except Exception:
        return default

def _write_json(path: str, payload):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(payload, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)

def load_users():
    data = _read_json(USERS_FILE, {})
    for uid, u in data.items():
        u.setdefault("fio", None)               # –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        u.setdefault("role", "newbie")           # newbie / letnik
        u.setdefault("subject", None)            # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        u.setdefault("guide_index", 0)           # –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≥–∞–π–¥–∞
        u.setdefault("last_guide_sent_at", None) # ISO —Å—Ç—Ä–æ–∫–∞
        u.setdefault("progress", {})             # {guide_id: {"read": bool, "task_done": bool}}
        u.setdefault("created_at", datetime.now(TIMEZONE).isoformat())
    return data

def save_users(data):
    _write_json(USERS_FILE, data)

def load_guides():
    data = _read_json(GUIDES_FILE, {})
    if not data:
        data = {
            "newbie": [
                {"id": "n1", "title": "–ì–∞–π–¥ 1", "url": "https://example.com/newbie-1"},
                {"id": "n2", "title": "–ì–∞–π–¥ 2", "url": "https://example.com/newbie-2"},
                {"id": "n3", "title": "–ì–∞–π–¥ 3 (—Å –ø—Ä–µ–¥–º–µ—Ç–æ–º)", "url": "https://example.com/newbie-3"}
            ],
            "letnik": [
                {"id": "l1", "title": "–ì–∞–π–¥ –ª–µ—Ç–Ω–∏–∫ 1", "url": "https://example.com/letnik-1"},
                {"id": "l2", "title": "–ì–∞–π–¥ –ª–µ—Ç–Ω–∏–∫ 2", "url": "https://example.com/letnik-2"},
                {"id": "l3", "title": "–ì–∞–π–¥ –ª–µ—Ç–Ω–∏–∫ 3", "url": "https://example.com/letnik-3"}
            ],
            "subjects": ["–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–±–∏–æ–ª–æ–≥–∏—è", "—Ö–∏–º–∏—è"]
        }
        _write_json(GUIDES_FILE, data)
    return data

USERS = load_users()
GUIDES = load_guides()

# -----------------------
# –ë–û–¢
# -----------------------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
# -----------------------
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# -----------------------
def kb_main(role: str):
    rows = []
    rows.append([InlineKeyboardButton(text="üìö –í—Å–µ –≥–∞–π–¥—ã", callback_data="guides:menu")])
    rows.append([
        InlineKeyboardButton(text="üß≠ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress:me"),
        InlineKeyboardButton(text="üì® –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="task:done")
    ])
    if role == "newbie":
        rows.append([InlineKeyboardButton(text="üïó –ú–æ–π –≥—Ä–∞—Ñ–∏–∫ –≥–∞–π–¥–æ–≤", callback_data="newbie:schedule")])
    if role == "letnik":
        rows.append([InlineKeyboardButton(text="‚ö° –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –≥–∞–π–¥—ã", callback_data="letnik:all")])
    rows.append([InlineKeyboardButton(text="üìò –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subject:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_subjects():
    btns = []
    for s in GUIDES["subjects"]:
        btns.append([InlineKeyboardButton(text=s.title(), callback_data=f"subject:set:{s}")])
    return InlineKeyboardMarkup(inline_keyboard=btns)

def kb_guides_list(role: str):
    items = GUIDES["newbie"] if role == "newbie" else GUIDES["letnik"]
    rows = []
    for g in items:
        rows.append([InlineKeyboardButton(text=g["title"], url=g["url"])])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_yes_no(cb_yes: str, cb_no: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=cb_yes),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data=cb_no)]
    ])

# -----------------------
# –£–¢–ò–õ–ò–¢–´
# -----------------------
def user(u: Message | CallbackQuery):
    uid = (u.from_user.id if isinstance(u, Message) else u.from_user.id)
    if str(uid) not in USERS:
        USERS[str(uid)] = {
            "fio": None,
            "role": "newbie",
            "subject": None,
            "guide_index": 0,
            "last_guide_sent_at": None,
            "progress": {},
            "created_at": datetime.now(TIMEZONE).isoformat()
        }
        save_users(USERS)
    return USERS[str(uid)]

def is_after_8_msk(dt: datetime):
    return dt.astimezone(TIMEZONE).time() >= time(8, 0)

async def send_newbie_next_guide(uid: int):
    u = USERS.get(str(uid))
    if not u or u.get("role") != "newbie":
        return
    idx = u.get("guide_index", 0)
    items = GUIDES["newbie"]
    if idx >= len(items):
        await bot.send_message(uid, "üéâ –í—Å–µ –≥–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return
    g = items[idx]
    # –æ—Å–æ–±–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è 3-–≥–æ –≥–∞–π–¥–∞
    if g["id"] == "n3" and u.get("subject"):
        task_text = f"–ó–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{u['subject']}¬ª"
    else:
        task_text = "–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–æ 22:00"
    await bot.send_message(
        uid,
        f"üìò –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≥–∞–π–¥: <b>{g['title']}</b>\n–°—Å—ã–ª–∫–∞: {g['url']}\n\n{task_text}"
    )
    u["last_guide_sent_at"] = datetime.now(TIMEZONE).isoformat()
    save_users(USERS)

async def send_letnik_all(uid: int):
    rows = []
    for g in GUIDES["letnik"]:
        rows.append(f"‚Ä¢ <b>{g['title']}</b> ‚Äî {g['url']}")
    text = "‚ö° –í—Å–µ –≥–∞–π–¥—ã –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤:\n\n" + "\n".join(rows)
    await bot.send_message(uid, text)
# -----------------------
# –•–ï–ù–î–õ–ï–†–´
# -----------------------
@dp.message(CommandStart())
async def start(message: Message):
    u = user(message)
    if not u["fio"]:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.")
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –Ø –Ω–æ–≤–∏—á–æ–∫", callback_data="role:newbie")],
            [InlineKeyboardButton(text="üü† –Ø –ª–µ—Ç–Ω–∏–∫", callback_data="role:letnik")]
        ])
    )

@dp.message(F.text & (lambda m: not user(m)["fio"]))
async def set_fio(message: Message):
    u = user(message)
    u["fio"] = message.text.strip()
    save_users(USERS)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –Ø –Ω–æ–≤–∏—á–æ–∫", callback_data="role:newbie")],
            [InlineKeyboardButton(text="üü† –Ø –ª–µ—Ç–Ω–∏–∫", callback_data="role:letnik")]
        ])
    )

@dp.callback_query(F.data.startswith("role:"))
async def set_role(cb: CallbackQuery):
    r = cb.data.split(":")[1]
    u = user(cb)
    if r == "letnik":
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤:")
        u["pending_role"] = "letnik"
        save_users(USERS)
    else:
        u["role"] = "newbie"
        save_users(USERS)
        await cb.message.answer(
            "–ì–æ—Ç–æ–≤–æ! –¢—ã –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ <b>–Ω–æ–≤–∏—á–æ–∫</b>.\n"
            "–ì–∞–π–¥—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ 08:00 –ú–°–ö.",
            reply_markup=kb_main("newbie")
        )
    await cb.answer()

@dp.message(F.text & (lambda m: user(m).get("pending_role") == "letnik"))
async def letnik_code(message: Message):
    u = user(message)
    if message.text.strip().lower() == "–ª–µ—Ç–ª2025":
        u["role"] = "letnik"
        u.pop("pending_role", None)
        save_users(USERS)
        await message.answer(
            "–ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –¢—ã —Ç–µ–ø–µ—Ä—å <b>–ª–µ—Ç–Ω–∏–∫</b>.",
            reply_markup=kb_main("letnik")
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

@dp.callback_query(F.data == "guides:menu")
async def guides_menu(cb: CallbackQuery):
    u = user(cb)
    if not u["subject"]:
        await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb_subjects())
        await cb.answer()
        return
    await cb.message.answer("–ö–∞—Ç–∞–ª–æ–≥ –≥–∞–π–¥–æ–≤:", reply_markup=kb_guides_list(u["role"]))
    await cb.answer()

@dp.callback_query(F.data == "progress:me")
async def my_progress(cb: CallbackQuery):
    u = user(cb)
    prog = u.get("progress", {})
    role = u["role"]
    items = GUIDES["newbie"] if role == "newbie" else GUIDES["letnik"]
    lines = []
    for g in items:
        st = prog.get(g["id"], {"read": False, "task_done": False})
        emoji = "‚úÖ" if st.get("task_done") else ("üìñ" if st.get("read") else "‚è≥")
        lines.append(f"{emoji} {g['title']}")
    if not lines:
        lines = ["–ø–æ–∫–∞ –ø—É—Å—Ç–æ"]
    subj = u.get("subject") or "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    await cb.message.answer("üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n" + "\n".join(lines) + f"\n\n–ü—Ä–µ–¥–º–µ—Ç: <b>{subj}</b>")
    await cb.answer()

@dp.callback_query(F.data == "task:done")
async def task_done(cb: CallbackQuery):
    now = datetime.now(TIMEZONE).time()
    if now >= time(22, 0):
        await cb.message.answer("‚ùå –í—Ä–µ–º—è —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ—à–ª–æ. –ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        await cb.answer()
        return
    u = user(cb)
    role = u["role"]
    items = GUIDES["newbie"] if role == "newbie" else GUIDES["letnik"]
    idx = u.get("guide_index", 0)
    guide = items[idx] if idx < len(items) else None
    if not guide:
        await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ—á–∞—Ç—å.")
        await cb.answer()
        return
    prog = u.setdefault("progress", {})
    gstat = prog.setdefault(guide["id"], {"read": True, "task_done": False})
    gstat["task_done"] = True
    save_users(USERS)
    await cb.message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ ¬´{guide['title']}¬ª –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!")
    await cb.answer()

@dp.callback_query(F.data == "subject:menu")
async def subject_menu(cb: CallbackQuery):
    await cb.message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb_subjects())
    await cb.answer()

@dp.callback_query(F.data.startswith("subject:set:"))
async def subject_set(cb: CallbackQuery):
    s = cb.data.split(":")[2]
    u = user(cb)
    u["subject"] = s
    save_users(USERS)
    await cb.message.answer(f"üìò –ü—Ä–µ–¥–º–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <b>{s}</b>")
    await cb.answer()
# -----------------------
# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö
# -----------------------
async def scheduler_loop():
    """
    08:00 ‚Äî –≤—ã–¥–∞—á–∞ –Ω–æ–≤–∏—á–∫–∞–º –Ω–æ–≤–æ–≥–æ –≥–∞–π–¥–∞.
    14:00 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –≤ 22:00.
    21:00 ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º.
    –ü—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –ø–æ—Å–ª–µ 8:00 ‚Äî –¥–æ–≥–æ–Ω—è–µ–º –≤—ã–¥–∞—á—É.
    """
    await asyncio.sleep(3)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞

    now = datetime.now(TIMEZONE)
    if is_after_8_msk(now):
        for uid, u in USERS.items():
            if u.get("role") != "newbie":
                continue
            last = u.get("last_guide_sent_at")
            last_date = None
            if last:
                try:
                    last_date = datetime.fromisoformat(last).astimezone(TIMEZONE).date()
                except Exception:
                    last_date = None
            if last_date != now.date():
                try:
                    await send_newbie_next_guide(int(uid))
                except Exception:
                    pass

    while True:
        try:
            now = datetime.now(TIMEZONE)
            hh, mm = now.hour, now.minute

            # 08:00 ‚Äî –Ω–æ–≤—ã–π –≥–∞–π–¥ –Ω–æ–≤–∏—á–∫–∞–º
            if hh == 8 and mm == 0:
                for uid, u in USERS.items():
                    if u.get("role") == "newbie":
                        last = u.get("last_guide_sent_at")
                        last_date = None
                        if last:
                            try:
                                last_date = datetime.fromisoformat(last).astimezone(TIMEZONE).date()
                            except Exception:
                                last_date = None
                        if last_date != now.date():
                            await send_newbie_next_guide(int(uid))

            # 14:00 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω
            if hh == 14 and mm == 0:
                for uid, u in USERS.items():
                    if u.get("role") == "newbie":
                        await bot.send_message(int(uid), "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ 22:00 –ø–æ –ú–°–ö!")

            # 21:00 ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if hh == 21 and mm == 0:
                for uid, u in USERS.items():
                    if u.get("role") == "newbie":
                        await bot.send_message(int(uid), "‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ! –î–æ 22:00 –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.")

            await asyncio.sleep(60)

        except asyncio.CancelledError:
            break
        except Exception:
            await asyncio.sleep(5)

# -----------------------
# –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER
# -----------------------
async def handle_root(request):
    return web.Response(text="kurator-bot ok")

async def handle_health(request):
    return web.json_response({"status": "ok", "ts": datetime.now(TIMEZONE).isoformat()})

async def start_web_app():
    app = web.Application()
    app.add_routes([
        web.get("/", handle_root),
        web.get("/health", handle_health),
    ])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

# -----------------------
# MAIN
# -----------------------
async def main():
    await start_web_app()          # –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    asyncio.create_task(scheduler_loop())  # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
