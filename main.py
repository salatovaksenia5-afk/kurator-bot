# -*- coding: utf-8 -*-
"""
–ë–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä (aiogram v3)

–§–∏—á–∏:
- –†–æ–ª–∏: –ù–æ–≤–∏—á–æ–∫ / –õ–µ—Ç–Ω–∏–∫ (–ø–æ –∫–æ–¥—É)
- –°–±–æ—Ä –§–ò–û –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
- –ù–æ–≤–∏—á–æ–∫: –∞–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –≥–∞–π–¥–æ–≤ –≤ 08:00 (–ú–°–ö) –ø–æ –æ–¥–Ω–æ–º—É –≤ –¥–µ–Ω—å
  -> "üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥" -> –≤—ã–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è -> "‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ"
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ: 21:30 –∏ 21:55 –ú–°–ö, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–¥–∞–Ω–æ
- –õ–µ—Ç–Ω–∏–∫: –≤—ã–¥–∞—á–∞ —Ç–µ—Å—Ç–∞ + –∫–∞—Ç–∞–ª–æ–≥ –≥–∞–π–¥–æ–≤ ("üìö –ì–∞–π–¥—ã", "üì• –í—Å–µ –≥–∞–π–¥—ã")
- –ü—Ä–µ–¥–º–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 3-–π –¥–µ–Ω—å (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —Ä—É—Å—Å–∫–∏–π, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, –±–∏–æ–ª–æ–≥–∏—è, —Ö–∏–º–∏—è)
- –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ data/users.json
- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: /stats, /export (CSV), /find <—Ç–µ–∫—Å—Ç>, /send_today (—Ñ–æ—Ä—Å –≤—ã–¥–∞—á—É –≥–∞–π–¥–∞)
"""

import asyncio
import json
import os
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List

import pytz
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
)

# ======================= –ù–ê–°–¢–†–û–ô–ö–ò =======================

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN", "8222461922:AAEi2IxJfevX_LpL2bQ1s_dc_Uym7-rb2fk")

# ID –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –µ–º—É –¥–æ—Å—Ç—É–ø–Ω—ã /stats, /export, /find, /send_today)
ADMIN_IDS = {int(os.getenv("ADMIN_ID", "1026494049"))}

# –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –ª–µ—Ç–Ω–∏–∫–æ–≤
SUMMER_CODE = os.getenv("SUMMER_CODE", "–ª–µ—Ç–æ2025")

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç –ª–µ—Ç–Ω–∏–∫–æ–≤
SUMMER_TEST_LINK = os.getenv(
    "SUMMER_TEST_LINK",
    "https://docs.google.com/forms/d/e/1FAIpQLSdR-iR1mhQBwlNMPKNa_ugjYMAnIYnPDRAdrAbcwRjhBVqoPA/viewform?usp=header"
)

# –ì–∞–π–¥—ã (–∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏)
GUIDES: List[Dict[str, str]] = [
    {"title": "1) –û—Å–Ω–æ–≤—ã –∏ —ç—Ç–∏–∫–∞",        "url": "https://example.com/guide1"},
    {"title": "2) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å",     "url": "https://example.com/guide2"},
    {"title": "3) –ü—Ä–µ–¥–º–µ—Ç",               "url": "https://example.com/guide3"},
    {"title": "4) –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",     "url": "https://example.com/guide4"},
]

# –ó–∞–¥–∞–Ω–∏—è –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –≥–∞–π–¥–∞)
TASKS_BASE: List[Dict[str, str]] = [
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 1", "text": "–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è 1. (–∑–∞–≥–ª—É—à–∫–∞, –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç/—Å—Å—ã–ª–∫—É)"},
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 2", "text": "–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è 2. (–∑–∞–≥–ª—É—à–∫–∞, –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç/—Å—Å—ã–ª–∫—É)"},
    # –î–ª—è –¥–Ω—è 3 –±—É–¥–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 4", "text": "–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è 4. (–∑–∞–≥–ª—É—à–∫–∞, –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç/—Å—Å—ã–ª–∫—É)"},
]

# –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–Ω—è 3 (–Ω–æ–≤–∏—á–æ–∫)
SUBJECT_TASKS_DAY3 = {
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–ó–∞–¥–∞–Ω–∏–µ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ (–∑–∞–≥–ª—É—à–∫–∞-—Å—Å—ã–ª–∫–∞).",
    "—Ñ–∏–∑–∏–∫–∞": "–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ñ–∏–∑–∏–∫–µ (–∑–∞–≥–ª—É—à–∫–∞-—Å—Å—ã–ª–∫–∞).",
    "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": "–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É (–∑–∞–≥–ª—É—à–∫–∞-—Å—Å—ã–ª–∫–∞).",
    "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "–ó–∞–¥–∞–Ω–∏–µ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é (–∑–∞–≥–ª—É—à–∫–∞-—Å—Å—ã–ª–∫–∞).",
    "–±–∏–æ–ª–æ–≥–∏—è": "–ó–∞–¥–∞–Ω–∏–µ –ø–æ –±–∏–æ–ª–æ–≥–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞-—Å—Å—ã–ª–∫–∞).",
    "—Ö–∏–º–∏—è": "–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ö–∏–º–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞-—Å—Å—ã–ª–∫–∞).",
}

# –ß–∞—Å—ã —Ä–∞—Å—Å—ã–ª–æ–∫ (–ú–°–ö)
TZ_MOSCOW = pytz.timezone("Europe/Moscow")
GUIDE_HOUR = int(os.getenv("GUIDE_HOUR", "8"))      # 08:00 ‚Äî –≥–∞–π–¥
GUIDE_MIN = int(os.getenv("GUIDE_MIN", "0"))
REMIND1_HOUR, REMIND1_MIN = 21, 30                   # 21:30 ‚Äî –º—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
REMIND2_HOUR, REMIND2_MIN = 21, 55                   # 21:55 ‚Äî –∂—ë—Å—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ 22:00

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
EXPORT_CSV = os.path.join(DATA_DIR, "export.csv")
os.makedirs(DATA_DIR, exist_ok=True)

# ======================= –ú–û–î–ï–õ–ò =======================

@dataclass
class Progress:
    role: str = ""  # "novice" | "summer"
    fio: str = ""
    subject: str = ""
    current_day: int = 0  # —Å–∫–æ–ª—å–∫–æ –≥–∞–π–¥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (0..len(GUIDES))
    guide_sent_dates: List[str] = None
    guide_read_dates: List[str] = None
    task_given_dates: List[str] = None
    task_done_dates: List[str] = None
    awaiting_read_confirm: bool = False
    last_update: str = ""

    def __post_init__(self):
        self.guide_sent_dates = self.guide_sent_dates or []
        self.guide_read_dates = self.guide_read_dates or []
        self.task_given_dates = self.task_given_dates or []
        self.task_done_dates = self.task_done_dates or []
        self.last_update = self.last_update or datetime.now(TZ_MOSCOW).isoformat()

# ======================= –ë–ê–ó–ê =======================

def load_users() -> Dict[str, Dict[str, Any]]:
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_users(db: Dict[str, Dict[str, Any]]) -> None:
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(db: Dict[str, Dict[str, Any]], user_id: int) -> Progress:
    uid = str(user_id)
    if uid not in db:
        db[uid] = asdict(Progress())
    return Progress(**db[uid])

def upsert_user(db: Dict[str, Dict[str, Any]], user_id: int, p: Progress) -> None:
    db[str(user_id)] = asdict(p)
    save_users(db)

def today_str() -> str:
    return datetime.now(TZ_MOSCOW).date().isoformat()

def is_today(dates: List[str]) -> bool:
    return today_str() in (dates or [])

def next_delay_to(hour: int, minute: int) -> float:
    now = datetime.now(TZ_MOSCOW)
    run_at = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if run_at <= now:
        run_at += timedelta(days=1)
    return (run_at - now).total_seconds()

# ======================= FSM =======================

class RegStates(StatesGroup):
    waiting_role = State()
    waiting_summer_code = State()
    waiting_fio = State()
    waiting_subject = State()

# ======================= UI =======================

def main_kb(role: Optional[str] = None) -> ReplyKeyboardMarkup:
    # –î–ª—è –ª–µ—Ç–Ω–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≥–∞–π–¥–æ–≤
    rows = []
    rows.append([KeyboardButton(text="–Ø –Ω–æ–≤–∏—á–æ–∫"), KeyboardButton(text="–Ø –ª–µ—Ç–Ω–∏–∫")])
    rows.append([KeyboardButton(text="üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥"), KeyboardButton(text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ")])
    rows.append([KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")])
    if role == "summer":
        rows.append([KeyboardButton(text="üìö –ì–∞–π–¥—ã"), KeyboardButton(text="üì• –í—Å–µ –≥–∞–π–¥—ã")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# ======================= –ë–û–¢ =======================

bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –¥–Ω—è ----------
def make_task_text_for_day(p: Progress) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (p.current_day),
    –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º—É –≥–∞–π–¥—É.
    """
    day_index = p.current_day  # 0..N-1
    # –î–µ–Ω—å 3 ‚Äî –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π (–∏–Ω–¥–µ–∫—Å 2)
    if day_index == 2:
        subj = (p.subject or "").strip().lower()
        text = SUBJECT_TASKS_DAY3.get(subj)
        if not text:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –¥–∞–π—Ç–µ –∑–∞–≥–ª—É—à–∫—É –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±—É—á–∞—Ç–æ—Ä—É
            return "–ü—Ä–µ–¥–º–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞). –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –ø—Ä–µ–¥–º–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ –æ–±—É—á–∞—Ç–æ—Ä—É."
        return text

    # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π ‚Äî –∏–∑ TASKS_BASE
    # TASKS_BASE –∏–º–µ–µ—Ç 3 —ç–ª–µ–º–µ–Ω—Ç–∞: –¥–ª—è –¥–Ω–µ–π 1,2 –∏ 4 (–∏–Ω–¥–µ–∫—Å—ã 0,1,3)
    if day_index == 0:
        return TASKS_BASE[0]["text"]
    if day_index == 1:
        return TASKS_BASE[1]["text"]
    if day_index == 3:
        return TASKS_BASE[2]["text"]

    return None

# ---------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ ----------

async def send_guide_if_due(user_id: int, db: Dict[str, Dict[str, Any]]) -> None:
    p = get_user(db, user_id)
    if p.role != "novice":
        return
    if p.current_day >= len(GUIDES):
        return
    if is_today(p.guide_sent_dates):
        return

    guide = GUIDES[p.current_day]
    await bot.send_message(
        user_id,
        f"üìñ –¢–≤–æ–π –≥–∞–π–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n<b>{guide['title']}</b>\n{guide['url']}\n\n"
        f"–ø—Ä–æ—á–∏—Ç–∞–π –∏ –Ω–∞–∂–º–∏ ¬´üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
    )
    p.guide_sent_dates.append(today_str())
    p.awaiting_read_confirm = True
    p.last_update = datetime.now(TZ_MOSCOW).isoformat()
    upsert_user(db, user_id, p)

async def daily_guides_loop():
    while True:
        await asyncio.sleep(next_delay_to(GUIDE_HOUR, GUIDE_MIN))
        db = load_users()
        for uid in list(db.keys()):
            try:
                await send_guide_if_due(int(uid), db)
            except Exception:
                continue

async def reminders_loop(hour: int, minute: int, kind: str):
    """kind: 'soft' –∏–ª–∏ 'hard' (–¥–ª—è —Ç–µ–∫—Å—Ç–∞)"""
    while True:
        await asyncio.sleep(next_delay_to(hour, minute))
        db = load_users()
        for uid, raw in list(db.items()):
            p = Progress(**raw)
            if p.role != "novice":
                continue
            # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –Ω–æ –Ω–µ —Å–¥–∞–ª–∏ ‚Äî –Ω–∞–ø–æ–º–Ω–∏—Ç—å
            if is_today(p.task_given_dates) and not is_today(p.task_done_dates):
                if kind == "soft":
                    txt = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –£—Å–ø–µ–π —Å–¥–∞—Ç—å –¥–æ 22:00 –ø–æ –ú–°–ö."
                else:
                    txt = "‚è∞ –°—É–ø–µ—Ä-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 22:00 –ø–æ –ú–°–ö. –ù–∞–∂–º–∏ ¬´‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ¬ª, –µ—Å–ª–∏ –≤—Å—ë –≥–æ—Ç–æ–≤–æ."
                try:
                    await bot.send_message(int(uid), txt, reply_markup=main_kb(role=p.role))
                except Exception:
                    continue

# ======================= –•–ï–ù–î–õ–ï–†–´ =======================

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@dp.message(CommandStart())
async def start(m: Message, state: FSMContext):
    db = load_users()
    p = get_user(db, m.from_user.id)
    upsert_user(db, m.from_user.id, p)

    await state.clear()
    await state.set_state(RegStates.waiting_role)
    role_hint = " (–ª–µ—Ç–Ω–∏–∫–∏ –≤–∏–¥—è—Ç –∫–∞—Ç–∞–ª–æ–≥ –≥–∞–π–¥–æ–≤)" if p.role == "summer" else ""
    await m.answer(
        "–ø—Ä–∏–≤–µ—Ç! —è –±–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä.\n\n–≤—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=main_kb(role=p.role or None)
    )

@dp.message(F.text.lower() == "—è –ª–µ—Ç–Ω–∏–∫")
async def choose_summer(m: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_summer_code)
    await m.answer("–≤–≤–µ–¥–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")

@dp.message(RegStates.waiting_summer_code)
async def summer_code(m: Message, state: FSMContext):
    if (m.text or "").strip().lower() != SUMMER_CODE.lower():
        await m.answer("‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(role="summer")
    await state.set_state(RegStates.waiting_fio)
    await m.answer("–æ–∫. –≤–≤–µ–¥–∏ —Å–≤–æ—ë —Ñ–∏–æ (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):")

@dp.message(F.text.lower() == "—è –Ω–æ–≤–∏—á–æ–∫")
async def choose_novice(m: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_fio)
    await m.answer("–æ—Ç–ª–∏—á–Ω–æ. –≤–≤–µ–¥–∏ —Å–≤–æ—ë —Ñ–∏–æ (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):")

@dp.message(RegStates.waiting_fio)
async def reg_fio(m: Message, state: FSMContext):
    fio = (m.text or "").strip()
    if len(fio) < 2:
        await m.answer("–≤–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ñ–∏–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        return
    await state.update_data(fio=fio)
    await state.set_state(RegStates.waiting_subject)
    await m.answer("—Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞¬ª, ¬´—Ñ–∏–∑–∏–∫–∞¬ª, ¬´—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫¬ª, ¬´–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ¬ª, ¬´–±–∏–æ–ª–æ–≥–∏—è¬ª, ¬´—Ö–∏–º–∏—è¬ª):")

@dp.message(RegStates.waiting_subject)
async def reg_subject(m: Message, state: FSMContext):
    subject = (m.text or "").strip().lower()
    data = await state.get_data()
    fio = data.get("fio", "")
    role_flag = data.get("role")

    db = load_users()
    p = get_user(db, m.from_user.id)
    p.fio = fio
    p.subject = subject
    if role_flag == "summer":
        p.role = "summer"
    else:
        p.role = "novice"
    p.last_update = datetime.now(TZ_MOSCOW).isoformat()
    upsert_user(db, m.from_user.id, p)

    await state.clear()

    if p.role == "summer":
        await m.answer(
            f"–≥–æ—Ç–æ–≤–æ, {p.fio}.\n–≤–æ—Ç —Ç–≤–æ–π —Ç–µ—Å—Ç –ª–µ—Ç–Ω–∏–∫–∞:\n{SUMMER_TEST_LINK}\n\n"
            f"—Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥: ¬´üìö –≥–∞–π–¥—ã¬ª –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Å—ë: ¬´üì• –≤—Å–µ –≥–∞–π–¥—ã¬ª.",
            reply_markup=main_kb(role=p.role)
        )
    else:
        await m.answer(
            f"–æ–∫, {p.fio}. –ø–µ—Ä–≤—ã–π –≥–∞–π–¥ –ø—Ä–∏–¥—ë—Ç –≤ {GUIDE_HOUR:02d}:{GUIDE_MIN:02d} –ø–æ –º–æ—Å–∫–≤–µ. "
            f"–ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è –∂–º–∏ ¬´üìñ —è –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥¬ª, –∏ —è –ø—Ä–∏—à–ª—é –∑–∞–¥–∞–Ω–∏–µ.",
            reply_markup=main_kb(role=p.role)
        )

@dp.message(F.text == "üìö –ì–∞–π–¥—ã")
async def summer_guides(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if p.role != "summer":
        await m.answer("—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–∞. –µ—Å–ª–∏ —Ç—ã –Ω–æ–≤–∏—á–æ–∫ ‚Äî –∂–¥–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–∞–π–¥—ã.")
        return
    lines = [f"‚Ä¢ <a href='{g['url']}'>{g['title']}</a>" for g in GUIDES]
    await m.answer("–∫–∞—Ç–∞–ª–æ–≥ –≥–∞–π–¥–æ–≤:\n" + "\n".join(lines))

@dp.message(F.text == "üì• –í—Å–µ –≥–∞–π–¥—ã")
async def summer_all_guides(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if p.role != "summer":
        await m.answer("—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–∞.")
        return
    txt = "\n\n".join([f"<b>{g['title']}</b>\n{g['url']}" for g in GUIDES])
    await m.answer(txt)

@dp.message(F.text == "üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥")
async def confirm_read(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if p.role != "novice":
        await m.answer("—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞. –µ—Å–ª–∏ —Ç—ã –ª–µ—Ç–Ω–∏–∫ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–π ¬´üìö –≥–∞–π–¥—ã¬ª.")
        return
    if not p.awaiting_read_confirm:
        await m.answer("—Å–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Å—å –≥–∞–π–¥–∞ –∏ –ø—Ä–æ—á–∏—Ç–∞–π –µ–≥–æ. –≥–∞–π–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 08:00 –ø–æ –º–æ—Å–∫–≤–µ.")
        return

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    p.awaiting_read_confirm = False
    p.guide_read_dates.append(today_str())
    # –≤—ã–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∂–µ –¥–Ω—è
    task_text = make_task_text_for_day(p)
    if task_text:
        await m.answer(f"üìù –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è:\n{task_text}")
        p.task_given_dates.append(today_str())
    else:
        await m.answer("–Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –Ω–∞–ø–∏—à–∏ –æ–±—É—á–∞—Ç–æ—Ä—É.")
    upsert_user(db, m.from_user.id, p)

@dp.message(F.text == "‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ")
async def task_done(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if p.role != "novice":
        await m.answer("—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞.")
        return
    if not is_today(p.task_given_dates):
        await m.answer("—Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ—Å–ª–µ ¬´üìñ —è –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥¬ª).")
        return
    if is_today(p.task_done_dates):
        await m.answer("—è —É–∂–µ –∑–∞–ø–∏—Å–∞–ª, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è. nice!")
        return

    p.task_done_dates.append(today_str())
    p.current_day = min(p.current_day + 1, len(GUIDES))  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥. –¥–Ω—é
    p.last_update = datetime.now(TZ_MOSCOW).isoformat()
    upsert_user(db, m.from_user.id, p)

    if p.current_day >= len(GUIDES):
        await m.answer("–æ—Ç–ª–∏—á–Ω–æ! —Ç—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –≥–∞–π–¥—ã –∏ –∑–∞–¥–∞–Ω–∏—è. üéâ")
    else:
        await m.answer("–∑–∞–ø–∏—Å–∞–ª. –∂–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ –∑–∞–≤—Ç—Ä–∞ –≤ 08:00 (–º—Å–∫).")

@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
@dp.message(Command("progress"))
async def show_progress(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if not p.role:
        await m.answer("—Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –Ω–∞–∂–º–∏ ¬´—è –Ω–æ–≤–∏—á–æ–∫¬ª –∏–ª–∏ ¬´—è –ª–µ—Ç–Ω–∏–∫¬ª.")
        return
    if p.role == "summer":
        await m.answer(
            f"—Ä–æ–ª—å: –ª–µ—Ç–Ω–∏–∫\n—Ñ–∏–æ: {p.fio}\n–ø—Ä–µ–¥–º–µ—Ç: {p.subject}\n—Ç–µ—Å—Ç: {SUMMER_TEST_LINK}",
            reply_markup=main_kb(role=p.role)
        )
        return
    total = len(GUIDES)
    done = p.current_day
    guide_today = "–¥–∞" if is_today(p.guide_sent_dates) else "–Ω–µ—Ç"
    task_today = "–¥–∞" if is_today(p.task_given_dates) else "–Ω–µ—Ç"
    task_done = "–¥–∞" if is_today(p.task_done_dates) else "–Ω–µ—Ç"
    await m.answer(
        "—Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–æ–≤–∏—á–æ–∫):\n"
        f"—Ñ–∏–æ: {p.fio}\n–ø—Ä–µ–¥–º–µ—Ç: {p.subject}\n"
        f"–ø—Ä–æ–π–¥–µ–Ω–æ –¥–Ω–µ–π: {done} –∏–∑ {total}\n"
        f"–≥–∞–π–¥ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {guide_today}\n"
        f"–∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–Ω–æ: {task_today}\n"
        f"–∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_done}\n"
        f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {p.last_update}",
        reply_markup=main_kb(role=p.role)
    )

# ---------- –ê–¥–º–∏–Ω–∫–∏ ----------

@dp.message(Command("stats"))
async def stats(m: Message):
    if not is_admin(m.from_user.id):
        return
    db = load_users()
    total = len(db)
    novice = sum(1 for _, r in db.items() if r.get("role") == "novice")
    summer = sum(1 for _, r in db.items() if r.get("role") == "summer")
    today_tasks = sum(1 for _, r in db.items()
                      if r.get("role") == "novice"
                      and today_str() in (r.get("task_done_dates") or []))
    await m.answer(
        f"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–Ω–æ–≤–∏—á–∫–æ–≤: {novice}\n–ª–µ—Ç–Ω–∏–∫–æ–≤: {summer}\n"
        f"—Å–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è: {today_tasks}"
    )

@dp.message(Command("export"))
async def export_csv(m: Message):
    if not is_admin(m.from_user.id):
        return
    import csv
    db = load_users()
    headers = [
        "user_id", "role", "fio", "subject",
        "current_day", "guide_sent_dates", "guide_read_dates",
        "task_given_dates", "task_done_dates", "last_update"
    ]
    with open(EXPORT_CSV, "w", encoding="utf-8", newline="") as f:
        w = csv.writer(f, delimiter=";")
        w.writerow(headers)
        for uid, raw in db.items():
            p = Progress(**raw)
            w.writerow([
                uid, p.role, p.fio, p.subject,
                p.current_day,
                ",".join(p.guide_sent_dates),
                ",".join(p.guide_read_dates),
                ",".join(p.task_given_dates),
                ",".join(p.task_done_dates),
                p.last_update
            ])
    await m.answer_document(FSInputFile(EXPORT_CSV), caption="—ç–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤ (CSV).")

@dp.message(Command("find"))
async def find_user(m: Message):
    if not is_admin(m.from_user.id):
        return
    q = (m.text or "").split(maxsplit=1)
    if len(q) < 2:
        await m.answer("–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find <—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ñ–∏–æ –∏–ª–∏ id>")
        return
    needle = q[1].strip().lower()
    db = load_users()
    hits = []
    for uid, raw in db.items():
        fio = (raw.get("fio") or "").lower()
        if needle in fio or needle in uid:
            hits.append((uid, raw))
    if not hits:
        await m.answer("–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
        return
    lines = []
    for uid, r in hits[:30]:
        lines.append(f"{uid} ‚Äî {r.get('fio','?')} / {r.get('role','?')} / –¥–µ–Ω—å {r.get('current_day',0)}")
    await m.answer("–Ω–∞–π–¥–µ–Ω–æ:\n" + "\n".join(lines))

@dp.message(Command("send_today"))
async def force_send_today(m: Message):
    """–§–æ—Ä—Å –æ—Ç–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –≥–∞–π–¥—ã –≤—Å–µ–º –Ω–æ–≤–∏—á–∫–∞–º (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∫–∏/–¥–µ–º–æ)."""
    if not is_admin(m.from_user.id):
        return
    db = load_users()
    cnt = 0
    for uid in list(db.keys()):
        try:
            await send_guide_if_due(int(uid), db)
            cnt += 1
        except Exception:
            continue
    await m.answer(f"–æ–∫. –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≥–∞–π–¥—ã. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(db)}, –æ–±—Ä–∞–±–æ—Ç–∞–ª: {cnt}.")

# ======================= –ó–ê–ü–£–°–ö =======================

async def main():
    # —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: —É—Ç—Ä–µ–Ω–Ω–∏–π –≥–∞–π–¥ + –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
    asyncio.create_task(daily_guides_loop())
    asyncio.create_task(reminders_loop(REMIND1_HOUR, REMIND1_MIN, "soft"))
    asyncio.create_task(reminders_loop(REMIND2_HOUR, REMIND2_MIN, "hard"))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
