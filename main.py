import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command

TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"

# –•—Ä–∞–Ω–∏–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–¥–∞–Ω–∏—è
user_roles = {}  # {user_id: "–Ω–æ–≤–∏—á–æ–∫" / "–ª–µ—Ç–Ω–∏–∫"}
user_tasks = {}  # {user_id: {"text": "...", "expire": datetime}}

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# --- –ú–µ–Ω—é ---
def main_menu():
    kb = [
        [InlineKeyboardButton(text="–Ø –Ω–æ–≤–∏—á–æ–∫", callback_data="role_new")],
        [InlineKeyboardButton(text="–Ø –ª–µ—Ç–Ω–∏–∫", callback_data="role_summer")],
        [InlineKeyboardButton(text="üìö –ì–∞–π–¥—ã", callback_data="guides")],
        [InlineKeyboardButton(text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ", callback_data="done_task")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä.\n–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:", reply_markup=main_menu())

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ ---
@dp.callback_query(F.data == "role_new")
async def set_role_new(call: types.CallbackQuery):
    user_roles[call.from_user.id] = "–Ω–æ–≤–∏—á–æ–∫"
    await call.message.answer("–¢—ã –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ <b>–Ω–æ–≤–∏—á–æ–∫</b>. –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–æ 22:00 –ú–°–ö.")
    await call.answer()

@dp.callback_query(F.data == "role_summer")
async def set_role_summer(call: types.CallbackQuery):
    user_roles[call.from_user.id] = "–ª–µ—Ç–Ω–∏–∫"
    await call.message.answer("–¢—ã –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ <b>–ª–µ—Ç–Ω–∏–∫</b>. –ù–∞ —Ç–µ—Å—Ç –¥–∞–µ—Ç—Å—è —Å—É—Ç–∫–∏!")
    await call.answer()

# --- –ì–∞–π–¥—ã ---
@dp.callback_query(F.data == "guides")
async def guides_handler(call: types.CallbackQuery):
    role = user_roles.get(call.from_user.id)
    if role == "–ª–µ—Ç–Ω–∏–∫":
        await call.message.answer("–ö–∞—Ç–∞–ª–æ–≥ –≥–∞–π–¥–æ–≤:\n1) –û—Å–Ω–æ–≤—ã –∏ —ç—Ç–∏–∫–∞\n2) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å\n3) –ü—Ä–µ–¥–º–µ—Ç\n4) –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        await call.message.answer("–ì–∞–π–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ª–µ—Ç–Ω–∏–∫–∞–º.")
    await call.answer()

# --- –í—ã–¥–∞—á–∞ –∑–∞–¥–∞–Ω–∏—è ---
async def give_task(user_id, text, hours_to_expire):
    expire_time = datetime.now() + timedelta(hours=hours_to_expire)
    user_tasks[user_id] = {"text": text, "expire": expire_time}

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ", callback_data="done_task")]
        ]
    )
    await bot.send_message(user_id, f"–ó–∞–¥–∞–Ω–∏–µ: {text}\n–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ: {expire_time.strftime('%H:%M %d.%m')}", reply_markup=kb)

    # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await asyncio.sleep(hours_to_expire * 3600)
    if user_id in user_tasks and datetime.now() >= user_tasks[user_id]["expire"]:
        del user_tasks[user_id]
        await bot.send_message(user_id, "‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤—ã—à–µ–ª! –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

# --- –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ---
@dp.callback_query(F.data == "done_task")
async def done_task_handler(call: types.CallbackQuery):
    if call.from_user.id in user_tasks:
        del user_tasks[call.from_user.id]
        await call.message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        await call.message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
    await call.answer()

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def daily_reminder():
    while True:
        now = datetime.now()
        if now.hour == 19 and now.minute == 0:  # 22:00 –ú–°–ö = 19:00 –ø–æ GMT
            for user_id, role in user_roles.items():
                if role == "–Ω–æ–≤–∏—á–æ–∫":
                    await bot.send_message(user_id, "‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ 22:00 –ú–°–ö!")
                elif role == "–ª–µ—Ç–Ω–∏–∫":
                    await bot.send_message(user_id, "‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–∞ —Ç–µ—Å—Ç –æ—Å—Ç–∞–ª–∏—Å—å —Å—É—Ç–∫–∏!")
        await asyncio.sleep(60)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(daily_reminder())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



