# main.py
# -*- coding: utf-8 -*-

"""
–ö—É—Ä–∞—Ç–æ—Ä-–±–æ—Ç (Render + Webhook, aiogram v3)
- —Ä–æ–ª–∏: –Ω–æ–≤–∏—á–æ–∫ / –ª–µ—Ç–Ω–∏–∫
- –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏
- –≥–∞–π–¥—ã: –Ω–æ–≤–∏—á–∫–∏ ‚Äî –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –ª–µ—Ç–Ω–∏–∫–∏ ‚Äî "–æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ"
- –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –Ω–æ–≤–∏—á–∫–∞–º –¥–æ 22:00 –ú–°–ö –ø—Ä–æ –∑–∞–¥–∞–Ω–∏–µ; –ª–µ—Ç–Ω–∏–∫–∞–º ‚Äî –ø—Ä–æ —Ç–µ—Å—Ç (24 —á–∞—Å–∞)
- –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/–ø—Ä–æ–≥—Ä–µ—Å—Å (JSON-—Ñ–∞–π–ª)
- –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID)
- –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä (uvicorn); –∞–≤—Ç–æ-—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  BOT_TOKEN        ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  ADMIN_ID         ‚Äî —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-id (—Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º)
  PUBLIC_URL       ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π URL –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ (Render -> Settings -> Public URL)
  WEBHOOK_SECRET   ‚Äî –ª—é–±–æ–π —Å–µ–∫—Ä–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä abc123); –±—É–¥–µ—Ç –≤ –ø—É—Ç–∏ –≤–µ–±—Ö—É–∫–∞ /tg/<secret>
  TIMEZONE         ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "Europe/Moscow"
  STORAGE_FILE     ‚Äî –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /tmp/kurator_data.json
"""

import threading
from aiohttp import web

async def handle(request):
    return web.Response(text="Bot is running!")

def run_web():
    app = web.Application()
    app.router.add_get("/", handle)
    web.run_app(app, port=10000)

# –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_web).start()

import asyncio
import json
import os
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta, time
from typing import Dict, List, Optional, Set

import pytz
from aiohttp import web
from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

# ------------------------ –ö–æ–Ω—Ñ–∏–≥ ------------------------

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret123")
TIMEZONE = os.getenv("TIMEZONE", "Europe/Moscow")
STORAGE_FILE = os.getenv("STORAGE_FILE", "/tmp/kurator_data.json")

if not BOT_TOKEN:
    raise RuntimeError("ENV BOT_TOKEN is empty")
if not PUBLIC_URL:
    # –ù–∞ Render –∑–∞–ø–æ–ª–Ω–∏ PUBLIC_URL (Settings -> Environment -> Add var)
    # –ü—Ä–∏–º–µ—Ä: https://kurator-bot-xxxxx.onrender.com
    raise RuntimeError("ENV PUBLIC_URL is empty")

TZ = pytz.timezone(TIMEZONE)

# aiogram v3: parse_mode –∑–∞–¥–∞—ë–º —á–µ—Ä–µ–∑ DefaultBotProperties
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

router = Router()
dp.include_router(router)

# ------------------------ –î–∞–Ω–Ω—ã–µ/–º–æ–¥–µ–ª—å ------------------------

SUBJECTS = [
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ë–∏–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è"
]

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≥–∞–π–¥–æ–≤ (–º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å/—Ä–∞—Å—à–∏—Ä—è—Ç—å)
GUIDES_LIBRARY: Dict[str, List[str]] = {
    "–û—Å–Ω–æ–≤—ã –∏ —ç—Ç–∏–∫–∞": [
        "–ì–∞–π–¥ 1.1: –≠—Ç–∏–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞ ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
        "–ì–∞–π–¥ 1.2: –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å —É—á–µ–Ω–∏–∫–æ–º ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
        "–ì–∞–π–¥ 1.3: –ü—Ä–∞–≤–∏–ª–∞ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
    ],
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å": [
        "–ì–∞–π–¥ 2.1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
        "–ì–∞–π–¥ 2.2: –ö–∞–∫ –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
        "–ì–∞–π–¥ 2.3: –§–æ—Ä–º—ã –∏ —à–∞–±–ª–æ–Ω—ã ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
    ],
    "–ü—Ä–µ–¥–º–µ—Ç": [
        "–ì–∞–π–¥ 3.1: –ú–µ—Ç–æ–¥–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
        "–ì–∞–π–¥ 3.2: –ü—Ä–∏–º–µ—Ä—ã —É—Ä–æ–∫–æ–≤ ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
    ],
    "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã": [
        "–ì–∞–π–¥ 4.1: –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
        "–ì–∞–π–¥ 4.2: –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏... ‚Äî –∑–∞–≥–ª—É—à–∫–∞",
    ],
}

ALL_GUIDES_FLAT: List[str] = [g for group in GUIDES_LIBRARY.values() for g in group]

@dataclass
class Progress:
    role: str                        # "novice" | "letnik"
    subject: Optional[str] = None
    guides_read: Set[int] = None     # –Ω–∞–±–æ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–∑ ALL_GUIDES_FLAT
    tasks_done: int = 0
    next_guide_index: int = 0        # –∫–∞–∫–æ–π –∏–Ω–¥–µ–∫—Å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–∏—á–∫—É –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
    last_reminder_date: Optional[str] = None  # "YYYY-MM-DD" –∫–æ–≥–¥–∞ —Å–ª–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    last_test_warn_date: Optional[str] = None # –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤: –∫–æ–≥–¥–∞ —Å–ª–∞–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

    def to_json(self):
        return {
            "role": self.role,
            "subject": self.subject,
            "guides_read": list(self.guides_read or set()),
            "tasks_done": self.tasks_done,
            "next_guide_index": self.next_guide_index,
            "last_reminder_date": self.last_reminder_date,
            "last_test_warn_date": self.last_test_warn_date,
        }

    @staticmethod
    def from_json(d):
        return Progress(
            role=d.get("role", "novice"),
            subject=d.get("subject"),
            guides_read=set(d.get("guides_read", [])),
            tasks_done=int(d.get("tasks_done", 0)),
            next_guide_index=int(d.get("next_guide_index", 0)),
            last_reminder_date=d.get("last_reminder_date"),
            last_test_warn_date=d.get("last_test_warn_date"),
        )

# user_id -> Progress
USERS: Dict[int, Progress] = {}

def load_storage():
    if os.path.exists(STORAGE_FILE):
        try:
            with open(STORAGE_FILE, "r", encoding="utf-8") as f:
                raw = json.load(f)
            for uid, data in raw.items():
                USERS[int(uid)] = Progress.from_json(data)
        except Exception as e:
            print("Storage load error:", e)

def save_storage():
    try:
        data = {str(uid): USERS[uid].to_json() for uid in USERS}
        tmp = STORAGE_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, STORAGE_FILE)
    except Exception as e:
        print("Storage save error:", e)

load_storage()

# ------------------------ –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ------------------------

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –Ø –Ω–æ–≤–∏—á–æ–∫", callback_data="role:novice"),
         InlineKeyboardButton(text="üõ© –Ø –ª–µ—Ç–Ω–∏–∫", callback_data="role:letnik")],
        [InlineKeyboardButton(text="üìö –ì–∞–π–¥—ã", callback_data="guides:menu")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress:me")],
        [InlineKeyboardButton(text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ", callback_data="task:done")],
    ])

def kb_subjects() -> InlineKeyboardMarkup:
    rows = []
    row = []
    for i, subj in enumerate(SUBJECTS, 1):
        row.append(InlineKeyboardButton(text=subj, callback_data=f"subject:{subj}"))
        if i % 2 == 0:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_guides_menu(role: str) -> InlineKeyboardMarkup:
    rows = []
    if role == "novice":
        rows.append([InlineKeyboardButton(text="üì¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", callback_data="guides:next")])
    else:
        rows.append([InlineKeyboardButton(text="üìñ –û—Ç–∫—Ä—ã—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="guides:all")])
    rows.append([InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="guides:cats")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_categories() -> InlineKeyboardMarkup:
    rows = []
    for name in GUIDES_LIBRARY.keys():
        rows.append([InlineKeyboardButton(text=name, callback_data=f"cat:{name}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="guides:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_mark_read(idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìó –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", callback_data=f"read:{idx}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="home")]
    ])

def kb_admin() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton(text="üîî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞–ø–æ–º–Ω–∏—Ç—å –Ω–æ–≤–∏—á–∫–∞–º", callback_data="admin:remind_now")],
        [InlineKeyboardButton(text="üîî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ª–µ—Ç–Ω–∏–∫–æ–≤", callback_data="admin:test_warn_now")],
        [InlineKeyboardButton(text="üßπ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (user id)", callback_data="admin:reset_hint")]
    ])

def now_local() -> datetime:
    return datetime.now(TZ)

def today_str() -> str:
    return now_local().strftime("%Y-%m-%d")

# ------------------------ –°–æ—Å—Ç–æ—è–Ω–∏—è ------------------------

class AdminReset(StatesGroup):
    waiting_for_user_id = State()

# ------------------------ –•—ç–Ω–¥–ª–µ—Ä—ã ------------------------

@router.message(CommandStart())
async def start_cmd(m: Message, state: FSMContext):
    USERS.setdefault(m.from_user.id, Progress(role="novice", guides_read=set()))
    save_storage()
    await m.answer(
        "–ø—Ä–∏–≤–µ—Ç! —è –±–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä.\n\n–≤—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=kb_main()
    )

@router.message(Command("admin"))
async def admin_cmd(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id):
        return
    await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb_admin())

@router.callback_query(F.data == "home")
async def home_cb(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())
    await c.answer()

@router.callback_query(F.data.startswith("role:"))
async def set_role(c: CallbackQuery, state: FSMContext):
    role = c.data.split(":")[1]
    p = USERS.setdefault(c.from_user.id, Progress(role="novice", guides_read=set()))
    p.role = role
    save_storage()
    if role == "novice":
        await c.message.edit_text(
            "–û–∫–µ–π, —Ç—ã <b>–Ω–æ–≤–∏—á–æ–∫</b>.\n–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=kb_subjects()
        )
    else:
        await c.message.edit_text(
            "–û–∫–µ–π, —Ç—ã <b>–ª–µ—Ç–Ω–∏–∫</b>.\n–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=kb_subjects()
        )
    await c.answer("–†–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

@router.callback_query(F.data.startswith("subject:"))
async def set_subject(c: CallbackQuery, state: FSMContext):
    subj = c.data.split(":", 1)[1]
    p = USERS.setdefault(c.from_user.id, Progress(role="novice", guides_read=set()))
    p.subject = subj
    save_storage()
    await c.message.edit_text(
        f"–ü—Ä–µ–¥–º–µ—Ç: <b>{subj}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=kb_main()
    )
    await c.answer("–ü—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–∞–Ω")

@router.callback_query(F.data == "guides:menu")
async def guides_menu(c: CallbackQuery, state: FSMContext):
    p = USERS.setdefault(c.from_user.id, Progress(role="novice", guides_read=set()))
    role = p.role
    await c.message.edit_text(
        "–ú–µ–Ω—é –≥–∞–π–¥–æ–≤:",
        reply_markup=kb_guides_menu(role)
    )
    await c.answer()

@router.callback_query(F.data == "guides:cats")
async def guides_cats(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–∞–π–¥–æ–≤:", reply_markup=kb_categories())
    await c.answer()

@router.callback_query(F.data.startswith("cat:"))
async def show_category(c: CallbackQuery, state: FSMContext):
    name = c.data.split(":",1)[1]
    items = GUIDES_LIBRARY.get(name, [])
    if not items:
        await c.answer("–ü–æ–∫–∞ –ø—É—Å—Ç–æ", show_alert=True); return
    text = [f"<b>{name}</b>:"]
    base_index = 0
    # –Ω–∞–π–¥—ë–º —Å–º–µ—â–µ–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–ª–æ—Å–∫–æ–º —Å–ø–∏—Å–∫–µ
    offset = 0
    for k, v in GUIDES_LIBRARY.items():
        if k == name:
            base_index = offset
            break
        offset += len(v)
    for i, g in enumerate(items):
        idx = base_index + i
        mark = "‚úÖ" if idx in USERS.setdefault(c.from_user.id, Progress(role="novice", guides_read=set())).guides_read else "‚¨ú"
        text.append(f"{mark} {g}")
    await c.message.edit_text("\n".join(text), reply_markup=kb_categories())
    await c.answer()

@router.callback_query(F.data == "guides:all")
async def letnik_all_guides(c: CallbackQuery, state: FSMContext):
    p = USERS.setdefault(c.from_user.id, Progress(role="letnik", guides_read=set()))
    if p.role != "letnik":
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤", show_alert=True); return
    chunks = []
    chunk = []
    for i, g in enumerate(ALL_GUIDES_FLAT):
        chunk.append((i, g))
        if len(chunk) == 4:
            chunks.append(chunk); chunk = []
    if chunk: chunks.append(chunk)
    await c.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥ (–ª–∏—Å—Ç–∞–π –¥–∞–ª—å—à–µ):")
    for chunk in chunks:
        for idx, g in chunk:
            try:
                await c.message.answer(f"‚Ä¢ {g}", reply_markup=kb_mark_read(idx))
            except TelegramBadRequest:
                await asyncio.sleep(0.4)
    await c.answer("–û—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ –≥–∞–π–¥—ã")

@router.callback_query(F.data == "guides:next")
async def novice_next_guide(c: CallbackQuery, state: FSMContext):
    p = USERS.setdefault(c.from_user.id, Progress(role="novice", guides_read=set()))
    if p.role != "novice":
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤", show_alert=True); return
    idx = p.next_guide_index
    if idx >= len(ALL_GUIDES_FLAT):
        await c.answer("–í—Å–µ –≥–∞–π–¥—ã —É–∂–µ –≤—ã–¥–∞–Ω—ã!", show_alert=True); return
    guide = ALL_GUIDES_FLAT[idx]
    await c.message.answer(f"üì¨ –¢–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥:\n\n{guide}", reply_markup=kb_mark_read(idx))
    # —Å–ª–µ–¥—É—é—â–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–Ω–æ –≤—Ä—É—á–Ω—É—é —Ç–æ–∂–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å)
    await c.answer("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥")

@router.callback_query(F.data.startswith("read:"))
async def mark_read(c: CallbackQuery, state: FSMContext):
    idx = int(c.data.split(":")[1])
    p = USERS.setdefault(c.from_user.id, Progress(role="novice", guides_read=set()))
    p.guides_read.add(idx)
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ç–µ–∫—É—â–∏–π –¥–ª—è –Ω–æ–≤–∏—á–∫–∞ ‚Äî —Å–¥–≤–∏–Ω–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
    if p.role == "novice" and idx == p.next_guide_index:
        p.next_guide_index += 1
    save_storage()
    await c.answer("–û—Ç–º–µ—á–µ–Ω–æ ‚úÖ")
    try:
        await c.message.edit_reply_markup(reply_markup=None)
    except:
        pass

@router.callback_query(F.data == "progress:me")
async def my_progress(c: CallbackQuery, state: FSMContext):
    p = USERS.setdefault(c.from_user.id, Progress(role="novice", guides_read=set()))
    total = len(ALL_GUIDES_FLAT)
    read = len(p.guides_read)
    txt = [
        f"üìä <b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>",
        f"–†–æ–ª—å: <b>{'–ù–æ–≤–∏—á–æ–∫' if p.role=='novice' else '–õ–µ—Ç–Ω–∏–∫'}</b>",
        f"–ü—Ä–µ–¥–º–µ—Ç: <b>{p.subject or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}</b>",
        f"–ì–∞–π–¥—ã: <b>{read}/{total}</b>",
        f"–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{p.tasks_done}</b>",
    ]
    await c.message.edit_text("\n".join(txt), reply_markup=kb_main())
    await c.answer()

@router.callback_query(F.data == "task:done")
async def task_done(c: CallbackQuery, state: FSMContext):
    p = USERS.setdefault(c.from_user.id, Progress(role="novice", guides_read=set()))
    p.tasks_done += 1
    save_storage()
    await c.answer("–û—Ç–ª–∏—á–Ω–æ! –Ø –æ—Ç–º–µ—Ç–∏–ª ‚úÖ")
    await c.message.edit_text("–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ú–æ–ª–æ–¥–µ—Ü!", reply_markup=kb_main())

# ------------------------ –ê–¥–º–∏–Ω ------------------------

@router.callback_query(F.data == "admin:stats")
async def admin_stats(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        return
    total = len(USERS)
    novices = sum(1 for p in USERS.values() if p.role == "novice")
    letniki = total - novices
    txt = [f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}",
           f"‚Äî –ù–æ–≤–∏—á–∫–∏: {novices}",
           f"‚Äî –õ–µ—Ç–Ω–∏–∫–∏: {letniki}",
           "-------------------------"]
    # –∫–æ—Ä–æ—Ç–∫–∞—è –≤—ã–¥–∞—á–∞ –ø–æ 10
    for uid, p in list(USERS.items())[:10]:
        txt.append(f"{uid}: {p.role}, subj={p.subject}, guides={len(p.guides_read)}/{len(ALL_GUIDES_FLAT)}, tasks={p.tasks_done}")
    await c.message.edit_text("\n".join(txt), reply_markup=kb_admin())
    await c.answer()

@router.callback_query(F.data == "admin:remind_now")
async def admin_remind_now(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id): return
    await send_novice_reminders(force=True)
    await c.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

@router.callback_query(F.data == "admin:test_warn_now")
async def admin_warn_now(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id): return
    await send_letnik_test_warnings(force=True)
    await c.answer("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

@router.callback_query(F.data == "admin:reset_hint")
async def admin_reset_hint(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id): return
    await c.message.edit_text("–í–≤–µ–¥–∏ user_id –¥–ª—è —Å–±—Ä–æ—Å–∞. /cancel ‚Äî –æ—Ç–º–µ–Ω–∞.")
    await state.set_state(AdminReset.waiting_for_user_id)
    await c.answer()

@router.message(StateFilter(AdminReset.waiting_for_user_id))
async def admin_reset_do(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id):
        return
    if m.text.strip().lower() == "/cancel":
        await state.clear()
        await m.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=kb_admin())
        return
    try:
        uid = int(m.text.strip())
        if uid in USERS:
            USERS.pop(uid)
            save_storage()
            await m.answer(f"–°–±—Ä–æ—à–µ–Ω–æ –¥–ª—è {uid}", reply_markup=kb_admin())
        else:
            await m.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∞–∫–æ–π user_id", reply_markup=kb_admin())
    except:
        await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ user_id", reply_markup=kb_admin())
    await state.clear()

# ------------------------ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ ------------------------

async def send_guide_to_novices_if_morning():
    """
    –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–∫–æ–ª–æ 08:00 –ú–°–ö ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ –Ω–æ–≤–∏—á–∫–∞–º,
    –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ.
    –ï—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è –∏ —á–∞—Å –ø–æ–∑–∂–µ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –µ—Å–ª–∏ > 08:00.
    """
    local_now = now_local()
    target = local_now.replace(hour=8, minute=0, second=0, microsecond=0)
    if local_now > target:
        # —É–∂–µ –ø–æ–∑–∂–µ 8 ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
        await _dispatch_next_guides_to_all()
        return
    # –∏–Ω–∞—á–µ ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –¥–æ 8:00
    await asyncio.sleep((target - local_now).total_seconds())
    await _dispatch_next_guides_to_all()

async def _dispatch_next_guides_to_all():
    for uid, p in USERS.items():
        if p.role != "novice":
            continue
        if p.next_guide_index >= len(ALL_GUIDES_FLAT):
            continue
        try:
            guide = ALL_GUIDES_FLAT[p.next_guide_index]
            await bot.send_message(uid, f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–¢–≤–æ–π –≥–∞–π–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{guide}", reply_markup=kb_mark_read(p.next_guide_index))
        except:
            continue
    save_storage()

async def send_novice_reminders(force=False):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–æ ~21:30 –ú–°–ö –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–≤–∏—á–∫–∞–º –ø—Ä–æ –∑–∞–¥–∞–Ω–∏–µ –¥–æ 22:00.
    –ï—Å–ª–∏ force=True ‚Äî —à–ª—ë–º –≤–Ω–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    today = today_str()
    for uid, p in USERS.items():
        if p.role != "novice":
            continue
        if not force and p.last_reminder_date == today:
            continue
        try:
            await bot.send_message(uid, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ <b>22:00 (–ú–°–ö)</b>!")
            p.last_reminder_date = today
        except:
            pass
    save_storage()

async def send_letnik_test_warnings(force=False):
    """
    –õ–µ—Ç–Ω–∏–∫–∞–º ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ —Ç–µ—Å—Ç–∞ 24 —á–∞—Å–∞ (—É—Å–ª–æ–≤–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞).
    –®–ª—ë–º —Ä–∞–∑ –≤ –¥–µ–Ω—å ~12:00 –ú–°–ö.
    """
    today = today_str()
    for uid, p in USERS.items():
        if p.role != "letnik":
            continue
        if not force and p.last_test_warn_date == today:
            continue
        try:
            await bot.send_message(uid, "üß™ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–∞: –Ω–∞ —Ç–µ—Å—Ç –æ—Å—Ç–∞–ª–æ—Å—å ~24 —á–∞—Å–∞. –£—Å–ø–µ–π –ø—Ä–æ–π—Ç–∏!")
            p.last_test_warn_date = today
        except:
            pass
    save_storage()

async def scheduler_loop():
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:
    - —É—Ç—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–π–¥–æ–≤ –Ω–æ–≤–∏—á–∫–∞–º
    - –≤ 21:30 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º
    - –≤ 12:00 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ª–µ—Ç–Ω–∏–∫–∞–º
    –ù–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º Render, –µ—Å–ª–∏ –≤–µ–±—Å–µ—Ä–≤–∏—Å ¬´—É—Å–Ω—ë—Ç¬ª, –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è.
    –ù–æ –ø—Ä–∏ ¬´–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏¬ª —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É.
    """
    # —Å—Ä–∞–∑—É –æ–¥–∏–Ω ¬´—É—Ç—Ä–µ–Ω–Ω–∏–π¬ª –ø—Ä–æ–≥–æ–Ω, –µ—Å–ª–∏ –±–æ—Ç –ø—Ä–∏—à—ë–ª –≤ —Å—Ç—Ä–æ–π –ø–æ—Å–ª–µ 8:00
    asyncio.create_task(send_guide_to_novices_if_morning())

    while True:
        now = now_local().time()
        # 12:00 ‚Äî –ª–µ—Ç–Ω–∏–∫–∏
        if time(12, 0) <= now <= time(12, 2):
            await send_letnik_test_warnings()
        # 21:30 ‚Äî –Ω–æ–≤–∏—á–∫–∏
        if time(21, 30) <= now <= time(21, 32):
            await send_novice_reminders()
        await asyncio.sleep(60)  # —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º

# ------------------------ AIOHTTP —Å–µ—Ä–≤–µ—Ä (webhook) ------------------------

# –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–∞ /tg/<WEBHOOK_SECRET>
WEBHOOK_PATH = f"/tg/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{PUBLIC_URL}{WEBHOOK_PATH}"

async def handle_webhook(request: web.Request):
    data = await request.json()
    update = dp.feed_webhook_update(bot, data)
    return web.Response()

async def on_startup(app: web.Application):
    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    try:
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        print("Webhook set:", WEBHOOK_URL)
    except Exception as e:
        print("Webhook set error:", e)
    # —Å—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    app['scheduler'] = asyncio.create_task(scheduler_loop())

async def on_shutdown(app: web.Application):
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except:
        pass
    if task := app.get('scheduler'):
        task.cancel()

def create_app() -> web.Application:
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

app = create_app()

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –¥–ª—è Render). –ù–∞ Render –±—É–¥–µ—Ç uvicorn main:app
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", "8080")))


