import os
import json
import asyncio
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta, time, timezone

from aiohttp import web

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)

# === Google Sheets ===
import gspread
from google.oauth2.service_account import Credentials

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò / –ö–û–ù–°–¢–ê–ù–¢–´
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ—Ç BOT_TOKEN. –ó–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Render.")

ADMIN_ID = int(os.getenv("ADMIN_ID", "0") or "0")
ACCESS_CODE = os.getenv("ACCESS_CODE", "–ª–µ—Ç–ª2025").strip()

TIMEZONE = timezone(timedelta(hours=3))  # –ú–°–ö
REMIND_HOUR = 14  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º –≤ 14:00
DEADLINE_HOUR = 22  # –¥–µ–¥–ª–∞–π–Ω —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è –≤ 22:00

PORT = int(os.getenv("PORT", "10000"))

DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
GUIDES_FILE = os.path.join(DATA_DIR, "guides.json")

os.makedirs(DATA_DIR, exist_ok=True)

# === Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
SHEET_ID = os.getenv("SHEET_ID", "17zqwZ0MNNJWjzVfmBluLXyRGt-ogC14QxtXhTfEPsNU/edit?hl=ru&gid=0#gid=0").strip()
SHEET_TAB = os.getenv("SHEET_TAB", "–õ–∏—Å—Ç1").strip()
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS", "").strip()

# === HR/–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ ===
CHAT_LINK_NEWBIE = os.getenv("CHAT_LINK_NEWBIE", "").strip()

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

@dp.message(F.text)
async def capture_full_name(message: Message):
    u = get_user(message.from_user.id)
    if not u or not getattr(u, "awaiting_full_name", False):
        return
    full = message.text.strip()
    if len(full.split()) < 2:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è. –ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</i>")
        return
    u.full_name = full
    u.awaiting_full_name = False
    put_user(message.from_user.id, u)

    try:
        gs_set(message.from_user.id, {"–§–ò": full})
    except Exception:
        pass

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb_subjects())

@dp.callback_query(F.data.startswith("subject:set:"))
async def subject_set(cb: CallbackQuery):
    s = cb.data.split(":")[2]
    u = get_user(cb.from_user.id)
    u.subject = s
    put_user(cb.from_user.id, u)

    try:
        gs_set(cb.from_user.id, {"–ü—Ä–µ–¥–º–µ—Ç": s})
    except Exception:
        pass

    await cb.message.answer(f"üìò –ü—Ä–µ–¥–º–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <b>{s}</b>")

    if u.role == "newbie" and CHAT_LINK_NEWBIE and not getattr(u, "hr_chat_link_sent", False):
        u.hr_chat_link_sent = True
        put_user(cb.from_user.id, u)
        try:
            gs_set(cb.from_user.id, {"–í —á–∞—Ç–µ –Ω–æ–≤–∏—á–∫–æ–≤": "—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"})
        except Exception:
            pass
        await cb.message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—Å—Ç—É–ø–∏ –≤ —á–∞—Ç –Ω–æ–≤–∏—á–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CHAT_LINK_NEWBIE}\n\n"
            f"–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç–µ–±–µ –Ω–∞—á–Ω—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≥–∞–π–¥—ã (–ø–æ—Å–ª–µ 08:00 –ú–°–ö)."
        )

    await cb.answer()

@dp.callback_query(F.data == "task:done")
async def task_done(cb: CallbackQuery):
    u = get_user(cb.from_user.id)
    role = u.role
    items = GUIDES["newbie"] if role == "newbie" else GUIDES["letnik"]

    idx = u.guide_index
    guide = None
    if role == "newbie":
        if idx < len(items):
            guide = items[idx]
    else:
        guide = items[0] if items else None

    if not guide:
        await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ—á–∞—Ç—å.")
        await cb.answer()
        return

    prog = u.__dict__.setdefault("progress", {})
    gstat = prog.setdefault(guide["id"], {"read": True, "task_done": False})
    gstat["read"] = True
    gstat["task_done"] = True
    put_user(cb.from_user.id, u)

    await cb.message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ ¬´{guide['title']}¬ª –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!")

    if role == "newbie":
        guide_num = u.guide_index + 1
        try:
            gs_set(cb.from_user.id, {f"–ó–∞–¥–∞–Ω–∏–µ {guide_num}": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"})
        except Exception:
            pass
    else:
        try:
            gs_set(cb.from_user.id, {"–°—Ç–∞—Ç—É—Å": "–¢–µ—Å—Ç —É –ª–µ—Ç–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"})
        except Exception:
            pass

    await cb.answer()

@dp.callback_query(F.data == "final_test")
async def process_final_test(cb: CallbackQuery):
    u = get_user(cb.from_user.id)
    uid = cb.from_user.id
    role = u.role

    if role != "newbie":
        await cb.answer("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ‚Äî –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.", show_alert=True)
        return

    u.final_test_done = True
    u.finished_at = datetime.now(TIMEZONE).isoformat()
    put_user(uid, u)

    try:
        gs_set(uid, {
            "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç": "‚úì",
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è": datetime.now(TIMEZONE).strftime("%Y-%m-%d"),
            "–°—Ç–∞—Ç—É—Å": "–ó–∞–≤–µ—Ä—à–∏–ª –æ–±—É—á–µ–Ω–∏–µ"
        })
    except Exception:
        pass

    await cb.message.answer(
        "üéì <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n"
        "–¢—ã –ø—Ä–æ—à—ë–ª –æ–±—É—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! ü•≥\n\n"
        "–°–≤—è–∂–∏—Å—å —Å–æ —Å—Ç–∞—Ä—à–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤."
    )
    await cb.answer()


def _write_json(path: str, payload):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(payload, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)


def load_guides():
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
    {
      "newbie": [ {"id":"n1","title":"...","url":"..."},
                  {"id":"n2","title":"...","url":"..."},
                  {"id":"n3","title":"...","url":"..."} ],
      "letnik": [ {"id":"l1","title":"...","url":"..."}, ... ],
      "subjects": ["–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–±–∏–æ–ª–æ–≥–∏—è", "—Ö–∏–º–∏—è", "–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"],
      "tasks_third_by_subject": {
          "<subject>": "–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è 3-–≥–æ –≥–∞–π–¥–∞ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"
      }
    }
    """
    data = _read_json(GUIDES_FILE, {})
    if not data:
        data = {
            "newbie": [
                {"id": "n1", "title": "–ì–∞–π–¥ 1: –û—Å–Ω–æ–≤—ã –∏ —ç—Ç–∏–∫–∞", "url": "https://example.com/g1"},
                {"id": "n2", "title": "–ì–∞–π–¥ 2: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å", "url": "https://example.com/g2"},
                {"id": "n3", "title": "–ì–∞–π–¥ 3: –ü—Ä–µ–¥–º–µ—Ç—ã", "url": "https://example.com/g3"},
            ],
            "letnik": [
                {"id": "l1", "title": "–ì–∞–π–¥1: –û—Å–Ω–æ–≤—ã –∏ —ç—Ç–∏–∫–∞", "url": "https://example.com/la"},
                {"id": "l2", "title": "–ì–∞–π–¥ 2: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å", "url": "https://example.com/lb"},
                {"id": "l3", "title": "–ì–∞–π–¥ 3: –ü—Ä–µ–¥–º–µ—Ç—ã", "url": "https://example.com/lc"},
            ],
            "subjects": [
                "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
                "—Ñ–∏–∑–∏–∫–∞",
                "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
                "–±–∏–æ–ª–æ–≥–∏—è",
                "—Ö–∏–º–∏—è",
                "–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
            ],
            # –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è 3-–≥–æ –≥–∞–π–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏)
            "tasks_third_by_subject": {
                "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–°–æ—Å—Ç–∞–≤—å –º–∏–Ω–∏-–∫–æ–Ω—Å–ø–µ–∫—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ—à–µ–Ω–∏—è —Ç–∏–ø–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ï–ì–≠ –∏ –∑–∞–ø–∏—à–∏ 3 –ø—Ä–∏–º–µ—Ä–∞.",
                "—Ñ–∏–∑–∏–∫–∞": "–†–∞–∑–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞: —É—Å–ª–æ–≤–∏—è, —Ñ–æ—Ä–º—É–ª—ã, —Ä–µ—à–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç.",
                "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": "–ù–∞–ø–∏—à–∏ –ø–ª–∞–Ω —Å–æ—á–∏–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Ç–µ–º–µ + 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞.",
                "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "–î–∞–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 5-—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ —Ç–µ–º—ã –∏ –ø—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã.",
                "–±–∏–æ–ª–æ–≥–∏—è": "–ù–∞–±—Ä–æ—Å–∞–π —Å—Ö–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å–∞ (—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑/–∫–ª–µ—Ç–æ—á–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ) –∏ –ø–æ—è—Å–Ω–∏ —ç—Ç–∞–ø—ã.",
                "—Ö–∏–º–∏—è": "–°–æ—Å—Ç–∞–≤—å 3 —É—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –ø–æ —Ç–µ–º–µ –∏ –ø—Ä–æ–≥–æ–≤–æ—Ä–∏ –ø—Ä–∞–≤–∏–ª–∞ —É—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è.",
                "–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–†–µ—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä"
            }
        }
        _write_json(GUIDES_FILE, data)
    return data


GUIDES = load_guides()


# --- –º–æ–¥–µ–ª–∏ / —É—Ç–∏–ª–∏—Ç—ã
@dataclass
class Progress:
    role: str = "newbie"              # newbie | letnik
    name: str | None = None           # "–§–∞–º–∏–ª–∏—è –ò–º—è"
    subject: str | None = None
    allow_letnik: bool = False        # –¥–æ—Å—Ç—É–ø –∫ –ª–µ—Ç–Ω–∏–∫–∞–º –ø–æ—Å–ª–µ –∫–æ–¥–∞
    guide_index: int = 0              # –∏–Ω–¥–µ–∫—Å –≥–∞–π–¥–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
    last_guide_sent_at: str | None = None  # ISO –ú–°–ö
    has_read_today: bool = False      # –ø—Ä–æ—á–∏—Ç–∞–ª —Ç–µ–∫—É—â–∏–π –≥–∞–π–¥ (–Ω–æ–≤–∏—á–æ–∫, —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π)
    task_done_dates: list = None      # —Å–ø–∏—Å–æ–∫ ISO –¥–∞—Ç –ú–°–ö, –∫–æ–≥–¥–∞ —Å–¥–∞–Ω–æ (–¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤)
    created_at: str = None            # ISO –ú–°–ö —Å–æ–∑–¥–∞–Ω–∏—è

    def to_dict(self):
        d = asdict(self)
        if d["task_done_dates"] is None:
            d["task_done_dates"] = []
        return d


def now_msk() -> datetime:
    return datetime.now(TIMEZONE)


def today_msk() -> datetime.date:
    return now_msk().date()


def iso(dt: datetime) -> str:
    return dt.astimezone(TIMEZONE).isoformat()


def is_time_before_deadline(dt: datetime) -> bool:
    return dt.time() < time(DEADLINE_HOUR, 0)


def load_users() -> dict[str, dict]:
    data = _read_json(USERS_FILE, {})
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    changed = False
    for uid, raw in list(data.items()):
        # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç -> –Ω–æ–≤—ã–π
        if "task_done_dates" not in raw:
            raw["task_done_dates"] = []
            changed = True
        if "has_read_today" not in raw:
            raw["has_read_today"] = False
            changed = True
        if "allow_letnik" not in raw:
            raw["allow_letnik"] = False
            changed = True
        if "created_at" not in raw:
            raw["created_at"] = iso(now_msk())
            changed = True
    if changed:
        _write_json(USERS_FILE, data)
    return data


def save_users(data: dict):
    _write_json(USERS_FILE, data)


USERS: dict[str, dict] = load_users()


def get_user(uid: int) -> Progress:
    key = str(uid)
    if key not in USERS:
        USERS[key] = Progress(created_at=iso(now_msk())).to_dict()
        save_users(USERS)
    p = Progress(**USERS[key])
    # –ø–æ—Å—Ç-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    if p.task_done_dates is None:
        p.task_done_dates = []
    return p


def put_user(uid: int, p: Progress):
    USERS[str(uid)] = p.to_dict()
    save_users(USERS)


# =========================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# =========================
def kb_role() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–Ø –Ω–æ–≤–∏—á–æ–∫"), KeyboardButton(text="–Ø –ª–µ—Ç–Ω–∏–∫")]
        ],
        resize_keyboard=True
    )


def kb_main_newbie(p: Progress) -> InlineKeyboardMarkup:
    # –∫–Ω–æ–ø–∫–∏ —á–∏—Ç–∞–µ–º/–∑–∞–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç
    rows = []
    rows.append([InlineKeyboardButton(text="üìò –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subject:menu")])
    if p.subject:
        rows.append([InlineKeyboardButton(text="üìñ –û—Ç–∫—Ä—ã—Ç—å –≥–∞–π–¥", callback_data="newbie:open_guide")])
        rows.append([InlineKeyboardButton(text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ", callback_data="newbie:task_done")])
    rows.append([InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress:me")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def kb_main_letnik(p: Progress) -> InlineKeyboardMarkup:
    rows = []
    rows.append([InlineKeyboardButton(text="üìò –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subject:menu")])
    if p.allow_letnik:
        rows.append([InlineKeyboardButton(text="‚ö° –í—Å–µ –≥–∞–π–¥—ã –ª–µ—Ç–Ω–∏–∫–∞", callback_data="letnik:all")])
    else:
        rows.append([InlineKeyboardButton(text="üîí –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", callback_data="letnik:code")])
    rows.append([InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress:me")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def kb_subjects() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=s.title(), callback_data=f"subject:set:{s}")]
            for s in GUIDES["subjects"]
        ]
    )


def kb_read_confirm() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –≥–∞–π–¥", callback_data="newbie:read_confirm")]
        ]
    )


# =========================
# FSM: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
# =========================
class RegStates(StatesGroup):
    waiting_role = State()
    waiting_name = State()
    waiting_subject = State()
    waiting_letnik_code = State()


# =========================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# =========================
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)


# =========================
# –•–ï–õ–ü–ï–†–´ –î–õ–Ø –°–¶–ï–ù–ê–†–ò–ï–í
# =========================
async def send_newbie_today_guide(uid: int, p: Progress):
    items = GUIDES["newbie"]
    idx = p.guide_index
    if idx >= len(items):
        await bot.send_message(uid, "üéâ –¢—ã –ø—Ä–æ—à—ë–ª(–ª–∞) –≤—Å–µ –Ω–æ–≤–∏—á–∫–æ–≤—ã–µ –≥–∞–π–¥—ã!")
        return

    g = items[idx]
    p.last_guide_sent_at = iso(now_msk())
    p.has_read_today = False
    put_user(uid, p)

    text = (
        f"üìò –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≥–∞–π–¥:\n<b>{g['title']}</b>\n{g['url']}\n\n"
        f"–ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
        f"–î–µ–¥–ª–∞–π–Ω —Å–¥–∞—á–∏ ‚Äî <b>{DEADLINE_HOUR}:00</b> –ø–æ –ú–°–ö."
    )
    await bot.send_message(uid, text, reply_markup=kb_read_confirm())


def _today_iso_date() -> str:
    return today_msk().isoformat()


def _third_guide_task_for_subject(subject: str) -> str:
    tasks = GUIDES.get("tasks_third_by_subject", {})
    return tasks.get(subject or "", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è 3-–≥–æ –≥–∞–π–¥–∞ –ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.")


async def send_newbie_task(uid: int, p: Progress):
    """
    –í—ã–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è). –ï—Å–ª–∏ —ç—Ç–æ 3-–π –≥–∞–π–¥ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
    """
    idx = p.guide_index
    # –∑–∞—â–∏—Ç–∞
    items = GUIDES["newbie"]
    if idx >= len(items):
        await bot.send_message(uid, "üéâ –ù–æ–≤–∏—á–∫–æ–≤—ã–µ –≥–∞–π–¥—ã —É–∂–µ –≤—Å–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        return

    g = items[idx]
    if g["id"] == "n3":  # —Ç—Ä–µ—Ç–∏–π –≥–∞–π–¥ (–ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –≤ –ø—Ä–∏–º–µ—Ä–µ)
        task_text = _third_guide_task_for_subject(p.subject or "")
    else:
        # –æ–±—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞
        task_text = "–ö—Ä–∞—Ç–∫–æ –∑–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–π –æ—Å–Ω–æ–≤–Ω—ã–µ –º—ã—Å–ª–∏ –≥–∞–π–¥–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ."

    # –í—Ä–µ–º—è ‚Äî –º–æ–∂–Ω–æ –ª–∏ –µ—â—ë —Å–¥–∞–≤–∞—Ç—å?
    now = now_msk()
    if not is_time_before_deadline(now):
        deadline_note = "‚ö†Ô∏è –î–µ–¥–ª–∞–π–Ω —É–∂–µ –ø—Ä–æ—à—ë–ª. –ö–Ω–æ–ø–∫–∞ —Å–¥–∞—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    else:
        deadline_note = f"–°–¥–∞—Ç—å –º–æ–∂–Ω–æ –¥–æ <b>{DEADLINE_HOUR}:00</b> –ú–°–ö."

    await bot.send_message(
        uid,
        f"üìù –ó–∞–¥–∞–Ω–∏–µ –∫ ¬´{g['title']}¬ª:\n\n{task_text}\n\n{deadline_note}"
    )


def can_submit_now() -> bool:
    """–ú–æ–∂–Ω–æ –ª–∏ –Ω–∞–∂–∏–º–∞—Ç—å ¬´–Ø –≤—ã–ø–æ–ª–Ω–∏–ª¬ª —Å–µ–π—á–∞—Å (–¥–æ 22:00 –ø–æ –ú–°–ö)."""
    return is_time_before_deadline(now_msk())


# =========================
# /start –∏ –ø–µ—Ä–≤–∏—á–Ω–∞—è –∞–Ω–∫–µ—Ç–∞
# =========================
@router.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    p = get_user(m.from_user.id)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥–∏ –∏ –ø—Ä–æ—Å–∏–º —Ä–æ–ª—å
    await state.clear()
    await state.set_state(RegStates.waiting_role)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä.\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=kb_role()
    )


@router.message(RegStates.waiting_role, F.text.lower().in_({"—è –Ω–æ–≤–∏—á–æ–∫", "—è –ª–µ—Ç–Ω–∏–∫"}))
async def choose_role(m: Message, state: FSMContext):
    p = get_user(m.from_user.id)
    is_newbie = (m.text.lower() == "—è –Ω–æ–≤–∏—á–æ–∫")
    p.role = "newbie" if is_newbie else "letnik"
    put_user(m.from_user.id, p)

    await state.set_state(RegStates.waiting_name)
    await m.answer("–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</b> –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–∞ –ê–Ω–Ω–∞).",
                   reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))


@router.message(RegStates.waiting_role)
async def fallback_role(m: Message, state: FSMContext):
    await m.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É: <b>–Ø –Ω–æ–≤–∏—á–æ–∫</b> –∏–ª–∏ <b>–Ø –ª–µ—Ç–Ω–∏–∫</b>.", reply_markup=kb_role())


@router.message(RegStates.waiting_name, F.text.len() >= 3)
async def take_name(m: Message, state: FSMContext):
    # –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    text = " ".join(m.text.strip().split())
    p = get_user(m.from_user.id)
    p.name = text
    put_user(m.from_user.id, p)

    await state.set_state(RegStates.waiting_subject)
    await m.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")]], resize_keyboard=True)
    )
    # –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    await m.answer("üëá –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=None)
    await m.answer("–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=kb_subjects())


@router.message(RegStates.waiting_name)
async def fallback_name(m: Message, state: FSMContext):
    await m.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤–∞ –ê–Ω–Ω–∞</i>.")


@router.callback_query(F.data.startswith("subject:set:"))
async def subject_set(cb: CallbackQuery, state: FSMContext):
    s = cb.data.split(":", 2)[2]
    p = get_user(cb.from_user.id)
    p.subject = s
    put_user(cb.from_user.id, p)

    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    if p.role == "newbie":
        await cb.message.answer(
            f"üìò –ü—Ä–µ–¥–º–µ—Ç: <b>{s.title()}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
            f"–ö–Ω–æ–ø–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –≥–∞–π–¥–∞ –∏ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=kb_main_newbie(p)
        )
        # –µ—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 08:00 –∏ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏ ‚Äî –≤—ã–¥–∞—ë–º
        # (–Ω–æ –≥–∞–π–¥ –≤—ã–¥–∞—ë—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫; –∑–¥–µ—Å—å ‚Äî –ø–æ–ª–µ–∑–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞)
        await cb.message.answer(
            "–ì–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å <b>–ø–æ—Å–ª–µ 08:00</b> –ø–æ –ú–°–ö.\n"
            "–ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ–∑–∂–µ ‚Äî –≥–∞–π–¥ –ø—Ä–∏–¥—ë—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞."
        )
    else:
        await cb.message.answer(
            f"üìò –ü—Ä–µ–¥–º–µ—Ç: <b>{s.title()}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
            reply_markup=kb_main_letnik(p)
        )


@router.callback_query(F.data == "subject:menu")
async def subject_menu(cb: CallbackQuery):
    await cb.message.answer("–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=kb_subjects())
    await cb.answer()


# =========================
# –õ–ï–¢–ù–ò–ö–ò: –∫–æ–¥ –∏ –≥–∞–π–¥—ã
# =========================
@router.callback_query(F.data == "letnik:code")
async def ask_letnik_code(cb: CallbackQuery, state: FSMContext):
    p = get_user(cb.from_user.id)
    if p.allow_letnik:
        await cb.answer("–î–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
        return
    await state.set_state(RegStates.waiting_letnik_code)
    await cb.message.answer("–í–≤–µ–¥–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤:")
    await cb.answer()


@router.message(RegStates.waiting_letnik_code)
async def check_letnik_code(m: Message, state: FSMContext):
    p = get_user(m.from_user.id)
    code = (m.text or "").strip()
    if code == ACCESS_CODE:
        p.allow_letnik = True
        put_user(m.from_user.id, p)
        await state.clear()
        await m.answer("‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π. –î–æ—Å—Ç—É–ø –∫ –≥–∞–π–¥–∞–º –ª–µ—Ç–Ω–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç.", reply_markup=None)
        await m.answer("–ú–µ–Ω—é:", reply_markup=kb_main_letnik(p))
    else:
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")


@router.callback_query(F.data == "letnik:all")
async def letnik_all(cb: CallbackQuery):
    p = get_user(cb.from_user.id)
    if not p.allow_letnik:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏ –∫–æ–¥.", show_alert=True)
        return
    items = GUIDES["letnik"]
    text = "‚ö° –í—Å–µ –≥–∞–π–¥—ã –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤:\n\n" + "\n".join([f"‚Ä¢ <b>{g['title']}</b> ‚Äî {g['url']}" for g in items])
    await cb.message.answer(text)
    await cb.answer()


# =========================
# –ù–û–í–ò–ß–ö–ò: –≥–∞–π–¥/—á—Ç–µ–Ω–∏–µ/–∑–∞–¥–∞–Ω–∏–µ/—Å–¥–∞—á–∞
# =========================
@router.callback_query(F.data == "newbie:open_guide")
async def newbie_open_guide(cb: CallbackQuery):
    p = get_user(cb.from_user.id)
    if p.role != "newbie":
        await cb.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∏—á–∫–∞–º.", show_alert=True)
        return
    if not p.subject:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç.", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–∞–π–¥ (–µ—Å–ª–∏ —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è)
    items = GUIDES["newbie"]
    idx = p.guide_index
    if idx >= len(items):
        await cb.message.answer("üéâ –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª(–ª–∞) –≤—Å–µ –Ω–æ–≤–∏—á–∫–æ–≤—ã–µ –≥–∞–π–¥—ã!")
        await cb.answer()
        return

    g = items[idx]
    await cb.message.answer(
        f"üìò –¢–µ–∫—É—â–∏–π –≥–∞–π–¥:\n<b>{g['title']}</b>\n{g['url']}\n\n"
        f"–ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
        reply_markup=kb_read_confirm()
    )
    await cb.answer()


@router.callback_query(F.data == "newbie:read_confirm")
async def newbie_mark_read(cb: CallbackQuery):
    p = get_user(cb.from_user.id)
    if p.role != "newbie":
        await cb.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤")
        return
    p.has_read_today = True
    put_user(cb.from_user.id, p)
    await cb.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ì–∞–π–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π. –í–æ—Ç –∑–∞–¥–∞–Ω–∏–µ:")
    await send_newbie_task(cb.from_user.id, p)
    await cb.answer()


@router.callback_query(F.data == "newbie:task_done")
async def newbie_task_done(cb: CallbackQuery):
    p = get_user(cb.from_user.id)
    if p.role != "newbie":
        await cb.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤")
        return
    if not p.subject:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç.", show_alert=True)
        return

    # –¥–µ–¥–ª–∞–π–Ω
    if not can_submit_now():
        await cb.answer("–ü–æ—Å–ª–µ 22:00 —Å–¥–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üòî", show_alert=True)
        return

    # –∑–∞—â–∏—Ç–∞: –º–æ–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á—Ç–µ–Ω–∏–µ
    if not p.has_read_today:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –≥–∞–π–¥.", show_alert=True)
        return

    # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–¥–∞–Ω–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è
    tiso = _today_iso_date()
    if tiso not in p.task_done_dates:
        p.task_done_dates.append(tiso)

    # –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–Ω—é
    p.guide_index += 1
    p.has_read_today = False
    put_user(cb.from_user.id, p)

    await cb.message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ù–æ–≤—ã–π –≥–∞–π–¥ –ø—Ä–∏–¥—ë—Ç –ø–æ—Å–ª–µ 08:00 –ø–æ –ú–°–ö.")
    await cb.answer()


# =========================
# –ü–†–û–ì–†–ï–°–° / –ê–î–ú–ò–ù
# =========================
@router.callback_query(F.data == "progress:me")
async def progress_me(cb: CallbackQuery):
    p = get_user(cb.from_user.id)
    role = p.role
    subject = p.subject or "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    if role == "newbie":
        total = len(GUIDES["newbie"])
        done = min(p.guide_index, total)
        text = (
            "üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
            f"–†–æ–ª—å: –Ω–æ–≤–∏—á–æ–∫\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: <b>{subject}</b>\n"
            f"–ü—Ä–æ–π–¥–µ–Ω–æ –≥–∞–π–¥–æ–≤: <b>{done}</b> –∏–∑ <b>{total}</b>\n"
            f"–°–¥–∞–Ω–æ –¥–Ω–µ–π: <b>{len(p.task_done_dates)}</b>\n"
        )
    else:
        text = (
            "üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
            f"–†–æ–ª—å: –ª–µ—Ç–Ω–∏–∫\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: <b>{subject}</b>\n"
            f"–î–æ—Å—Ç—É–ø –∫ –≥–∞–π–¥–∞–º –ª–µ—Ç–Ω–∏–∫–∞: {'–¥–∞' if p.allow_letnik else '–Ω–µ—Ç'}\n"
        )
    await cb.message.answer(text)
    await cb.answer()


@router.message(Command("admin"))
async def admin_stats(m: Message):
    if ADMIN_ID and m.from_user.id != ADMIN_ID:
        return
    total = len(USERS)
    newbies = sum(1 for u in USERS.values() if u.get("role") == "newbie")
    letniki = sum(1 for u in USERS.values() if u.get("role") == "letnik")
    lines = [
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}",
        f"üü¢ –ù–æ–≤–∏—á–∫–æ–≤: {newbies}",
        f"üü† –õ–µ—Ç–Ω–∏–∫–æ–≤: {letniki}",
        "",
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:"
    ]
    last = sorted(USERS.items(), key=lambda kv: kv[1].get("created_at", ""), reverse=True)[:10]
    for uid, u in last:
        lines.append(f"{uid}: {u.get('name') or '‚Äî'} | {u.get('role')} | subj:{u.get('subject') or '‚Äî'} | idx:{u.get('guide_index', 0)}")
    await m.answer("\n".join(lines))
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ ‚Äî —Å–ø–∏—Å–æ–∫ —Å–¥–∞—á–∏ —Ç–µ—Å—Ç–æ–≤
@dp.message(Command("tests"))
async def tests_panel(message: Message):
    if ADMIN_ID and message.from_user.id != ADMIN_ID:
        return
    lines = ["üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π:"]
    for uid, u in USERS.items():
        name = u.get("full_name") or uid
        role = u.get("role", "‚Äî")
        subject = u.get("subject", "‚Äî")
        prog = u.get("progress", {})
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≥–∞–π–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        guide_id = None
        if role == "newbie":
            idx = u.get("guide_index", 0)
            if idx < len(GUIDES["newbie"]):
                guide_id = GUIDES["newbie"][idx]["id"]
        elif role == "letnik" and GUIDES["letnik"]:
            guide_id = GUIDES["letnik"][0]["id"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if guide_id and guide_id in prog:
            task_done = prog[guide_id].get("task_done", False)
            status = "‚úÖ –°–¥–∞–Ω–æ" if task_done else "‚ùå –ù–µ —Å–¥–∞–Ω–æ"
        else:
            status = "‚è≥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        lines.append(f"{name} ({role}, {subject}) ‚Äî {status}")
    
    await message.answer("\n".join(lines))



# =========================
# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö
# =========================
async def scheduler_loop():
    """
    1) –ù–∞ —Å—Ç–∞—Ä—Ç–µ: –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 08:00 –∏ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –≤—ã—Å—ã–ª–∞–ª–∏ ‚Äî –≤—ã—Å—ã–ª–∞–µ–º –Ω–æ–≤–∏—á–∫–∞–º –≥–∞–π–¥.
    2) –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 ‚Äî –≤—ã–¥–∞—ë–º –Ω–æ–≤–∏—á–∫–∞–º —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ (–ø–æ –æ–¥–Ω–æ–º—É).
    3) –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 14:00 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –≤ 22:00.
    """
    # –º–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    await asyncio.sleep(2)

    # –î–æ–≥–æ–Ω–∏–º —É—Ç—Ä–æ, –µ—Å–ª–∏ —Ä–µ—Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ 08:00
    now = now_msk()
    if now.time() >= time(8, 0):
        for uid, raw in list(USERS.items()):
            p = Progress(**raw)
            if p.role != "newbie":
                continue
            # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ (—Å—Ä–∞–≤–Ω–∏–º –¥–∞—Ç—É last_guide_sent_at)
            last_date = None
            if p.last_guide_sent_at:
                try:
                    last_date = datetime.fromisoformat(p.last_guide_sent_at).astimezone(TIMEZONE).date()
                except Exception:
                    last_date = None
            if last_date != today_msk():
                try:
                    await send_newbie_today_guide(int(uid), p)
                    # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                    await asyncio.sleep(0.1)
                except Exception:
                    pass

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    while True:
        try:
            now = now_msk()

            # 08:00 ‚Äî –≤—ã–¥–∞—á–∞ –Ω–æ–≤–∏—á–∫–∞–º
            if now.time().hour == 8 and now.time().minute == 0:
                for uid, raw in list(USERS.items()):
                    p = Progress(**raw)
                    if p.role != "newbie":
                        continue
                    last_date = None
                    if p.last_guide_sent_at:
                        try:
                            last_date = datetime.fromisoformat(p.last_guide_sent_at).astimezone(TIMEZONE).date()
                        except Exception:
                            last_date = None
                    if last_date == today_msk():
                        continue
                    await send_newbie_today_guide(int(uid), p)
                    await asyncio.sleep(0.1)

            # 14:00 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω
            if now.time().hour == REMIND_HOUR and now.time().minute == 0:
                for uid, raw in list(USERS.items()):
                    p = Progress(**raw)
                    if p.role != "newbie":
                        continue
                    await bot.send_message(int(uid), f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ <b>{DEADLINE_HOUR}:00</b> –ø–æ –ú–°–ö.")
                    await asyncio.sleep(0.05)

            await asyncio.sleep(60)
        except asyncio.CancelledError:
            break
        except Exception:
            # —á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ —É–ø–∞–ª –Ω–∞–≤—Å–µ–≥–¥–∞
            await asyncio.sleep(5)
            await cb.message.answer(
        "–ì–æ—Ç–æ–≤–æ! –¢—ã –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ <b>–Ω–æ–≤–∏—á–æ–∫</b>.\n\n"
        "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</i>)."
    )
    # –ó–∞–ø–∏—à–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        gs_set(cb.from_user.id, {
            "Telegram ID": str(cb.from_user.id),
            "–†–æ–ª—å": "newbie",
            "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞": datetime.now(TIMEZONE).strftime("%Y-%m-%d"),
            "–°—Ç–∞—Ç—É—Å": "–í –æ–±—É—á–µ–Ω–∏–∏"
        })
    except Exception:
        pass
@dp.message(F.text)
async def capture_full_name(message: Message):
    u = user(message)
    if not u.get("awaiting_full_name"):
        return
    full = message.text.strip()
    if len(full.split()) < 2:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è. –ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω</i>")
        return
    u["full_name"] = full
    u["awaiting_full_name"] = False
    save_users(USERS)

    # –ø–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        gs_set(message.from_user.id, {"–§–ò": full})
    except Exception:
        pass

    # –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç (—Ç–≤–æ—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=kb_subjects()
    )
@dp.callback_query(F.data.startswith("subject:set:"))
async def subject_set(cb: CallbackQuery):
    s = cb.data.split(":")[2]
    u = user(cb)
    u["subject"] = s
    save_users(USERS)

    # –û–±–Ω–æ–≤–∏–º —Ç–∞–±–ª–∏—Ü—É
    try:
        gs_set(cb.from_user.id, {"–ü—Ä–µ–¥–º–µ—Ç": s})
    except Exception:
        pass

    await cb.message.answer(f"üìò –ü—Ä–µ–¥–º–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <b>{s}</b>")

    # HR-—à–∞–≥: –¥–∞—ë–º —Å—Å—ã–ª–∫—É –≤ —á–∞—Ç –Ω–æ–≤–∏—á–∫–æ–≤ (–æ–¥–∏–Ω —Ä–∞–∑)
    if u.get("role") == "newbie" and CHAT_LINK_NEWBIE and not u.get("hr_chat_link_sent"):
        u["hr_chat_link_sent"] = True
        save_users(USERS)
        try:
            gs_set(cb.from_user.id, {"–í —á–∞—Ç–µ –Ω–æ–≤–∏—á–∫–æ–≤": "—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"})
        except Exception:
            pass
        await cb.message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—Å—Ç—É–ø–∏ –≤ —á–∞—Ç –Ω–æ–≤–∏—á–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ:\n{CHAT_LINK_NEWBIE}\n\n"
            f"–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç–µ–±–µ –Ω–∞—á–Ω—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≥–∞–π–¥—ã (–ø–æ—Å–ª–µ 08:00 –ú–°–ö)."
        )

    await cb.answer()
async def send_newbie_next_guide(uid: int):
    u = USERS.get(str(uid))
    if not u or u.get("role") != "newbie":
        return
    idx = u.get("guide_index", 0)
    items = GUIDES["newbie"]
    if idx >= len(items):
        await bot.send_message(uid, "üéâ –í—Å–µ –≥–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–µ—Ç–Ω–∏–∫ —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.")
        return
    g = items[idx]
    await bot.send_message(
        uid,
        f"üìò –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≥–∞–π–¥: <b>{g['title']}</b>\n–°—Å—ã–ª–∫–∞: {g['url']}\n\n"
        f"–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫ 22:00 –ø–æ –ú–°–ö."
    )
    u["last_guide_sent_at"] = datetime.now(TIMEZONE).isoformat()
    save_users(USERS)

    # === –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É: "–ì–∞–π–¥ X"
    guide_num = idx + 1
    try:
        gs_set(uid, {f"–ì–∞–π–¥ {guide_num}": "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})
    except Exception:
        pass
@dp.callback_query(F.data == "task:done")
async def task_done(cb: CallbackQuery):
    u = user(cb)
    role = u["role"]
    items = GUIDES["newbie"] if role == "newbie" else GUIDES["letnik"]

    idx = u.get("guide_index", 0)
    guide = None
    if role == "newbie":
        if idx < len(items):
            guide = items[idx]
    else:
        guide = items[0] if items else None

    if not guide:
        await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ—á–∞—Ç—å.")
        await cb.answer()
        return

    prog = u.setdefault("progress", {})
    gstat = prog.setdefault(guide["id"], {"read": True, "task_done": False})
    gstat["read"] = True
    gstat["task_done"] = True
    save_users(USERS)

    await cb.message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ ¬´{guide['title']}¬ª –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!")

    # === –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É: "–ó–∞–¥–∞–Ω–∏–µ X"
    if role == "newbie":
        guide_num = u.get("guide_index", 0) + 1
        try:
            gs_set(cb.from_user.id, {f"–ó–∞–¥–∞–Ω–∏–µ {guide_num}": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"})
        except Exception:
            pass
    else:
        # –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–Ω–æ —Ñ–∏–∫—Å–∏—Ç—å –∏–Ω–∞—á–µ (–ø–æ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–µ)
        try:
            gs_set(cb.from_user.id, {"–°—Ç–∞—Ç—É—Å": "–¢–µ—Å—Ç —É –ª–µ—Ç–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"})
        except Exception:
            pass

    await cb.answer()
@dp.callback_query(F.data == "final_test")
async def process_final_test(cb: CallbackQuery):
    u = user(cb)
    uid = cb.from_user.id
    role = u.get("role")

    if role != "newbie":
        await cb.answer("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç ‚Äî –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.", show_alert=True)
        return

    u["final_test_done"] = True
    u["finished_at"] = datetime.now(TIMEZONE).isoformat()
    save_users(USERS)

    # –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        gs_set(uid, {
            "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç": "‚úì",
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è": datetime.now(TIMEZONE).strftime("%Y-%m-%d"),
            "–°—Ç–∞—Ç—É—Å": "–ó–∞–≤–µ—Ä—à–∏–ª –æ–±—É—á–µ–Ω–∏–µ"
        })
    except Exception:
        pass

    await cb.message.answer(
        "üéì <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n"
        "–¢—ã –ø—Ä–æ—à—ë–ª –æ–±—É—á–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! ü•≥\n\n"
        "–°–≤—è–∂–∏—Å—å —Å–æ —Å—Ç–∞—Ä—à–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤."
    )
    await cb.answer()



# =========================
# –í–ï–ë-–°–ï–†–í–ò–° –î–õ–Ø RENDER (–û–ë–•–û–î)
# =========================
async def handle_root(request):
    return web.Response(text="kurator-bot ok")


async def handle_health(request):
    return web.json_response({"status": "ok", "ts": iso(now_msk())})


async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/", handle_root), web.get("/health", handle_health)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()


# =========================
# MAIN
# =========================
async def main():
    # –≤–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è Render (—á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç)
    await start_web_app()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    asyncio.create_task(scheduler_loop())

    # –ø—É–ª–∏–Ω–≥
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
from aiohttp import web
import asyncio

async def health(request):
    return web.Response(text="OK")

async def start_web_app():
    app = web.Application()
    app.router.add_get("/health", health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

# –ó–∞–ø—É—Å–∫ –∏ –±–æ—Ç–∞, –∏ health-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_task = asyncio.create_task(dp.start_polling(bot))
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–ø—Ç–∞–π–º–∞
    web_task = asyncio.create_task(start_web_app())
    # –ñ–¥—ë–º –æ–±–∞ —Ç–∞—Å–∫–∞
    await asyncio.gather(bot_task, web_task)

if __name__ == "__main__":
    asyncio.run(main())
# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–°–¢–û–í ===

@dp.callback_query_handler(lambda c: c.data.startswith("test_"))
async def process_test(callback_query: types.CallbackQuery):
    subject = callback_query.data.split("_", 1)[1]
    
    await callback_query.message.answer(
        f"üìò –¢–µ—Å—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}.\n"
        f"–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã!"
    )
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == "final_test")
async def process_final_test(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üéì –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç!\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π."
    )
    await bot.answer_callback_query(callback_query.id)
guide_kb = InlineKeyboardMarkup()

guide_button = InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –≥–∞–π–¥", url=link)
guide_kb.add(guide_button)

# –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤
if role == "letnik":
    test_button = InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=f"test_{subject}")
    guide_kb.add(test_button)

# –ö–Ω–æ–ø–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ (–µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–∞–π–¥)
if role == "newbie" and guide_number == 3:  # –∑–∞–º–µ–Ω–∏ 3 –Ω–∞ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–∞–π–¥–∞
    final_test_button = InlineKeyboardButton("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç", callback_data="final_test")
    guide_kb.add(final_test_button)
if r == "newbie":
    u["awaiting_full_name"] = True
    save_users(USERS)

   












