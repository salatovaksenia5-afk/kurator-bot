# -*- coding: utf-8 -*-
"""
–ö—É—Ä–∞—Ç–æ—Ä-–±–æ—Ç (aiogram 3.x)
- –†–æ–ª–∏: –ù–æ–≤–∏—á–æ–∫ / –õ–µ—Ç–Ω–∏–∫ (–ø–æ –∫–æ–¥—É)
- –°–±–æ—Ä –§–ò–û –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
- –ù–æ–≤–∏—á–∫–∞–º: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–∞–π–¥—ã –≤ 08:00 –ø–æ –ú–æ—Å–∫–≤–µ, –ø–æ –æ–¥–Ω–æ–º—É –≤ –¥–µ–Ω—å
  –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è ‚Äî –≤—ã–¥–∞—ë—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
- –õ–µ—Ç–Ω–∏–∫–∞–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ + —Ç–µ—Å—Ç-—Å—Å—ã–ª–∫–∞
- –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ data/users.json, —ç–∫—Å–ø–æ—Ä—Ç /export
- –ö–æ–º–∞–Ω–¥–∞ /admin ‚Äî –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ ADMIN_ID)
!!! –í–ê–ñ–ù–û: –¢–æ–∫–µ–Ω –∏ ADMIN_ID –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""
import asyncio
import csv
import json
import os
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from typing import Dict, Any, List

import pytz
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
TOKEN = os.getenv("TOKEN", "").strip()                  # <-- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–¥–∞—Ç—å –≤ Render/–ª–æ–∫–∞–ª—å–Ω–æ
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))              # <-- —Ç–≤–æ–π Telegram ID
SUMMER_CODE = os.getenv("SUMMER_CODE", "–ª–µ—Ç–æ2025")      # –∫–æ–¥ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤
SUMMER_TEST_LINK = os.getenv("SUMMER_TEST_LINK", "https://example.com/test")

# –≥–∞–π–¥—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ -> —Å—Å—ã–ª–∫–∞). –ó–∞–ø–æ–ª–Ω—è–π –∫–∞–∫ –Ω—É–∂–Ω–æ.
GUIDES: List[Dict[str, str]] = [
    {"title": "1) –û—Å–Ω–æ–≤—ã –∏ —ç—Ç–∏–∫–∞",        "url": "https://example.com/guide1"},
    {"title": "2) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å",     "url": "https://example.com/guide2"},
    {"title": "3) –ü—Ä–µ–¥–º–µ—Ç (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ)", "url": "https://example.com/guide3"},
    {"title": "4) –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",     "url": "https://example.com/guide4"},
]

# –∑–∞–¥–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–æ–≥–¥–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω—É–∂–µ–Ω)
TASKS_DEFAULT: List[Dict[str, str]] = [
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 1", "text": "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è 1."},
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 2", "text": "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è 2."},
    # –¢—Ä–µ—Ç–∏–π –≥–∞–π–¥ ‚Äî –ø—Ä–µ–¥–º–µ—Ç–æ–∑–∞–≤–∏—Å–∏–º—ã–π, –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∏–∂–µ
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 3", "text": "–ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."},
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 4", "text": "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è 4."},
]

# –¥–ª—è 3-–≥–æ –¥–Ω—è ‚Äî –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º (—Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—à—å —Å–≤–æ–∏ —Å—Å—ã–ª–∫–∏/—Ç–µ–∫—Å—Ç—ã)
SUBJECT_TASKS_DAY3: Dict[str, str] = {
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":    "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ (–¥–µ–Ω—å 3).",
    "—Ñ–∏–∑–∏–∫–∞":         "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ñ–∏–∑–∏–∫–µ (–¥–µ–Ω—å 3).",
    "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫":   "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ä—É—Å—Å–∫–æ–º—É (–¥–µ–Ω—å 3).",
    "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é (–¥–µ–Ω—å 3).",
    "–±–∏–æ–ª–æ–≥–∏—è":       "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –ø–æ –±–∏–æ–ª–æ–≥–∏–∏ (–¥–µ–Ω—å 3).",
    "—Ö–∏–º–∏—è":          "–ó–∞–≥–ª—É—à–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ö–∏–º–∏–∏ (–¥–µ–Ω—å 3).",
}

SEND_HOUR = 8
SEND_MINUTE = 0
TZ_MOSCOW = pytz.timezone("Europe/Moscow")

DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
EXPORT_CSV = os.path.join(DATA_DIR, "export.csv")
os.makedirs(DATA_DIR, exist_ok=True)

# ========= –ú–û–î–ï–õ–¨ =========
@dataclass
class Progress:
    role: str = ""          # "novice" | "summer"
    fio: str = ""
    subject: str = ""
    current_day: int = 0    # —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ (0..len(GUIDES))
    guide_sent_dates: List[str] = None
    guide_read_dates: List[str] = None
    task_given_dates: List[str] = None
    task_done_dates: List[str] = None
    awaiting_read_confirm: bool = False
    last_update: str = ""

    def __post_init__(self):
        self.guide_sent_dates = self.guide_sent_dates or []
        self.guide_read_dates = self.guide_read_dates or []
        self.task_given_dates = self.task_given_dates or []
        self.task_done_dates = self.task_done_dates or []
        if not self.last_update:
            self.last_update = datetime.now(TZ_MOSCOW).isoformat()

def load_users() -> Dict[str, Dict[str, Any]]:
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_users(db: Dict[str, Dict[str, Any]]) -> None:
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(db: Dict[str, Dict[str, Any]], user_id: int) -> Progress:
    uid = str(user_id)
    if uid not in db:
        db[uid] = asdict(Progress())
    return Progress(**db[uid])

def upsert_user(db: Dict[str, Dict[str, Any]], user_id: int, p: Progress) -> None:
    db[str(user_id)] = asdict(p)
    save_users(db)

# ========= FSM =========
class RegStates(StatesGroup):
    waiting_role = State()
    waiting_summer_code = State()
    waiting_fio = State()
    waiting_subject = State()

# ========= –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ =========
def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–Ø –Ω–æ–≤–∏—á–æ–∫"), KeyboardButton(text="–Ø –ª–µ—Ç–Ω–∏–∫")],
            [KeyboardButton(text="üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥"),
             KeyboardButton(text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")],
        ],
        resize_keyboard=True
    )

# ========= –•–µ–ª–ø–µ—Ä—ã =========
def today_str() -> str:
    return datetime.now(TZ_MOSCOW).date().isoformat()

def is_today(dates: List[str]) -> bool:
    return today_str() in (dates or [])

def next_run_delay_sec(hour: int, minute: int) -> float:
    now = datetime.now(TZ_MOSCOW)
    run_at = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if run_at <= now:
        run_at += timedelta(days=1)
    return (run_at - now).total_seconds()

async def send_guide_if_due(bot: Bot, user_id: int, db: Dict[str, Dict[str, Any]]) -> None:
    p = get_user(db, user_id)
    if p.role != "novice":
        return
    if p.current_day >= len(GUIDES):
        return
    if is_today(p.guide_sent_dates):
        return

    guide = GUIDES[p.current_day]
    await bot.send_message(
        user_id,
        f"üìñ –¢–≤–æ–π –≥–∞–π–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n<b>{guide['title']}</b>\n{guide['url']}\n\n"
        f"–ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥¬ª, –∏ —è –ø—Ä–∏—à–ª—é –∑–∞–¥–∞–Ω–∏–µ.",
    )
    p.guide_sent_dates.append(today_str())
    p.awaiting_read_confirm = True
    upsert_user(db, user_id, p)

async def daily_broadcast(bot: Bot):
    while True:
        await asyncio.sleep(next_run_delay_sec(SEND_HOUR, SEND_MINUTE))
        db = load_users()
        for uid in list(db.keys()):
            try:
                await send_guide_if_due(bot, int(uid), db)
            except Exception:
                continue

# ========= –ë–û–¢ =========
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

@dp.message(CommandStart())
async def on_start(m: Message, state: FSMContext):
    db = load_users()
    p = get_user(db, m.from_user.id)
    upsert_user(db, m.from_user.id, p)

    await state.clear()
    await state.set_state(RegStates.waiting_role)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä.\n\n–í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=main_kb()
    )

@dp.message(F.text.lower() == "—è –ª–µ—Ç–Ω–∏–∫")
async def choose_summer(m: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_summer_code)
    await m.answer("–í–≤–µ–¥–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")

@dp.message(RegStates.waiting_summer_code)
async def summer_check_code(m: Message, state: FSMContext):
    if (m.text or "").strip().lower() != SUMMER_CODE.lower():
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(role="summer")
    await state.set_state(RegStates.waiting_fio)
    await m.answer("–ö–æ–¥ –≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):")

@dp.message(F.text.lower() == "—è –Ω–æ–≤–∏—á–æ–∫")
async def choose_novice(m: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_fio)
    await m.answer("–û–∫–µ–π! –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):")

@dp.message(RegStates.waiting_fio)
async def reg_fio(m: Message, state: FSMContext):
    fio = (m.text or "").strip()
    if len(fio) < 2:
        await m.answer("–í–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –§–ò–û, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        return
    await state.update_data(fio=fio)
    await state.set_state(RegStates.waiting_subject)
    await m.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞¬ª, ¬´—Ñ–∏–∑–∏–∫–∞¬ª, ¬´—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫¬ª, ¬´–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ¬ª, ¬´–±–∏–æ–ª–æ–≥–∏—è¬ª, ¬´—Ö–∏–º–∏—è¬ª):")

@dp.message(RegStates.waiting_subject)
async def reg_subject(m: Message, state: FSMContext):
    subject = (m.text or "").strip().lower()
    data = await state.get_data()
    fio = data.get("fio", "")
    role = "summer" if data.get("role") == "summer" else "novice"

    db = load_users()
    p = get_user(db, m.from_user.id)
    p.fio = fio
    p.subject = subject
    p.role = role
    p.last_update = datetime.now(TZ_MOSCOW).isoformat()
    upsert_user(db, m.from_user.id, p)
    await state.clear()

    if role == "summer":
        await m.answer(
            f"–ì–æ—Ç–æ–≤–æ, {p.fio}! –í–æ—Ç —Ç–µ—Å—Ç –ª–µ—Ç–Ω–∏–∫–∞:\n{SUMMER_TEST_LINK}\n\n"
            f"–°–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ ¬´üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª.",
            reply_markup=main_kb()
        )
    else:
        await m.answer(
            f"–û—Ç–ª–∏—á–Ω–æ, {p.fio}! –ü–µ—Ä–≤—ã–π –≥–∞–π–¥ –ø—Ä–∏–¥—ë—Ç –∑–∞–≤—Ç—Ä–∞ –≤ {SEND_HOUR:02d}:{SEND_MINUTE:02d} (–ú–°–ö). "
            f"–ü–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è –∂–º–∏ ¬´üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥¬ª, –∏ —è –≤—ã—à–ª—é –∑–∞–¥–∞–Ω–∏–µ.",
            reply_markup=main_kb()
        )

@dp.message(F.text == "üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥")
async def confirm_read(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if p.role != "novice":
        await m.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤. –ï—Å–ª–∏ —Ç—ã –ª–µ—Ç–Ω–∏–∫ ‚Äî —Å–º–æ—Ç—Ä–∏ —Ç–µ—Å—Ç.")
        return
    if not p.awaiting_read_confirm:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Å—å –≥–∞–π–¥–∞ (–≤ 08:00 –ø–æ –ú–æ—Å–∫–≤–µ) –∏ –ø—Ä–æ—á–∏—Ç–∞–π –µ–≥–æ.")
        return

    p.awaiting_read_confirm = False
    p.guide_read_dates.append(today_str())

    day_index = p.current_day  # 0..N-1
    # –≤—ã–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ
    if day_index == 2:  # —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å (–∏–Ω–¥–µ–∫—Å 2) ‚Äî –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–µ
        text = SUBJECT_TASKS_DAY3.get(p.subject.lower(), TASKS_DEFAULT[2]["text"])
        title = "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 3 (–ø–æ —Ç–≤–æ–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É)"
        await m.answer(f"üìù <b>{title}</b>\n{text}", reply_markup=main_kb())
    else:
        tasks = TASKS_DEFAULT
        if day_index < len(tasks):
            task = tasks[day_index]
            await m.answer(f"üìù <b>{task['title']}</b>\n{task['text']}", reply_markup=main_kb())
        else:
            await m.answer("–í—Å–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–¥–∞–Ω—ã. –ö—Ä–∞—Å–æ—Ç–∞!")

    p.task_given_dates.append(today_str())
    upsert_user(db, m.from_user.id, p)

@dp.message(F.text == "‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ")
async def mark_done(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if p.role != "novice":
        await m.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.")
        return
    if not is_today(p.task_given_dates):
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –≥–∞–π–¥–∞).")
        return
    if is_today(p.task_done_dates):
        await m.answer("–Ø —É–∂–µ –∑–∞–ø–∏—Å–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è. üëç")
        return

    p.task_done_dates.append(today_str())
    p.current_day = min(p.current_day + 1, len(GUIDES))
    p.last_update = datetime.now(TZ_MOSCOW).isoformat()
    upsert_user(db, m.from_user.id, p)

    if p.current_day >= len(GUIDES):
        await m.answer("üî• –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –≥–∞–π–¥—ã –∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")
    else:
        await m.answer("–ó–∞–ø–∏—Å–∞–ª! –ñ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ –∑–∞–≤—Ç—Ä–∞ –≤ 08:00 (–ú–°–ö).")

@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
@dp.message(Command("progress"))
async def progress(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if not p.role:
        await m.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ ¬´–Ø –Ω–æ–≤–∏—á–æ–∫¬ª –∏–ª–∏ ¬´–Ø –ª–µ—Ç–Ω–∏–∫¬ª.")
        return

    if p.role == "summer":
        await m.answer(
            f"–¢—ã –ª–µ—Ç–Ω–∏–∫.\n–§–ò–û: {p.fio}\n–ü—Ä–µ–¥–º–µ—Ç: {p.subject}\n–¢–µ—Å—Ç: {SUMMER_TEST_LINK}"
        )
        return

    total = len(GUIDES)
    done = p.current_day
    guide_today = "–¥–∞" if is_today(p.guide_sent_dates) else "–Ω–µ—Ç"
    task_today = "–¥–∞" if is_today(p.task_given_dates) else "–Ω–µ—Ç"
    task_done = "–¥–∞" if is_today(p.task_done_dates) else "–Ω–µ—Ç"

    await m.answer(
        "–ü—Ä–æ–≥—Ä–µ—Å—Å (–Ω–æ–≤–∏—á–æ–∫):\n"
        f"–§–ò–û: {p.fio}\n–ü—Ä–µ–¥–º–µ—Ç: {p.subject}\n"
        f"–ü—Ä–æ–π–¥–µ–Ω–æ –¥–Ω–µ–π: {done} –∏–∑ {total}\n"
        f"–ì–∞–π–¥ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {guide_today}\n"
        f"–ó–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–Ω–æ: {task_today}\n"
        f"–ó–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_done}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {p.last_update}",
        reply_markup=main_kb()
    )

@dp.message(Command("export"))
async def export_csv(m: Message):
    if ADMIN_ID and m.from_user.id != ADMIN_ID:
        await m.answer("–≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    db = load_users()
    headers = [
        "user_id", "role", "fio", "subject",
        "current_day", "guide_sent_dates", "guide_read_dates",
        "task_given_dates", "task_done_dates", "last_update"
    ]
    with open(EXPORT_CSV, "w", encoding="utf-8", newline="") as f:
        w = csv.writer(f, delimiter=";")
        w.writerow(headers)
        for uid, raw in db.items():
            p = Progress(**raw)
            w.writerow([
                uid, p.role, p.fio, p.subject, p.current_day,
                ",".join(p.guide_sent_dates),
                ",".join(p.guide_read_dates),
                ",".join(p.task_given_dates),
                ",".join(p.task_done_dates),
                p.last_update
            ])
    await m.answer("–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤: data/export.csv")

@dp.message(Command("admin"))
async def admin_panel(m: Message):
    if ADMIN_ID and m.from_user.id != ADMIN_ID:
        return
    db = load_users()
    total = len(db)
    novices = sum(1 for v in db.values() if v.get("role") == "novice")
    summers = sum(1 for v in db.values() if v.get("role") == "summer")
    max_day = max((Progress(**v).current_day for v in db.values() if v.get("role") == "novice"), default=0)
    await m.answer(
        f"–ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"–ù–æ–≤–∏—á–∫–æ–≤: {novices}\n–õ–µ—Ç–Ω–∏–∫–æ–≤: {summers}\n"
        f"–ú–∞–∫—Å. –¥–µ–Ω—å —Å—Ä–µ–¥–∏ –Ω–æ–≤–∏—á–∫–æ–≤: {max_day}"
    )

async def main():
    # —Ñ–æ–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    asyncio.create_task(daily_broadcast(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    if not TOKEN:
        raise SystemExit("–ù–µ –∑–∞–¥–∞–Ω TOKEN (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è).")
    asyncio.run(main())
