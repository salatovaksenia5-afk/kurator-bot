# -*- coding: utf-8 -*-
"""
–ë–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä (aiogram 3)
- –†–æ–ª–∏: –ù–æ–≤–∏—á–æ–∫ / –õ–µ—Ç–Ω–∏–∫ (–ø–æ –∫–æ–¥—É "–ª–µ—Ç–æ2025")
- –°–±–æ—Ä –§–ò–û –∏ –ø—Ä–µ–¥–º–µ—Ç–∞ (–∫–Ω–æ–ø–∫–∏)
- –ù–æ–≤–∏—á–∫–∏: 1 –≥–∞–π–¥/–¥–µ–Ω—å –≤ 08:00 Europe/Moscow (+–¥–æ–≥–æ–Ω—è–ª–∫–∞, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω —É—Ç—Ä–æ–º),
  –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –≤—ã–¥–∞—ë—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ; –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–¥–∞—á–µ –¥–æ 22:00
- –õ–µ—Ç–Ω–∏–∫–∏: —Å—Ä–∞–∑—É –≤—Å–µ –≥–∞–π–¥—ã, 24 —á–∞—Å–∞ –Ω–∞ —Ç–µ—Å—Ç (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
- /admin ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ ADMIN_ID)
- /export ‚Äî CSV (data/export.csv)
- –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: data/users.json
"""

import asyncio
import csv
import json
import os
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta, date
from typing import Dict, Any, Optional, List

import pytz
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)

# ======================= –ö–û–ù–§–ò–ì =======================

# –¢–æ–∫–µ–Ω ‚Äî –≤–æ–∑—å–º—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN, –∏–Ω–∞—á–µ ‚Äî –∏–∑ –¥–µ—Ñ–æ–ª—Ç–∞ –Ω–∏–∂–µ
TOKEN = os.getenv("TOKEN", "8222461922:AAEi2IxJfevX_LpL2bQ1s_dc_Uym7-rb2fk")

# –¢–≤–æ–π Telegram ID (–∞–¥–º–∏–Ω)
ADMIN_ID = 1026494049

# –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤
SUMMER_CODE = "–ª–µ—Ç–æ2025"

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç –ª–µ—Ç–Ω–∏–∫–æ–≤
SUMMER_TEST_LINK = "https://docs.google.com/forms/d/e/1FAIpQLSdR-iR1mhQBwlNMPKNa_ugjYMAnIYnPDRAdrAbcwRjhBVqoPA/viewform?usp=header"

# –ì–∞–π–¥—ã ‚Äî –∑–∞–≥–ª—É—à–∫–∏ (–ø–æ–º–µ–Ω—è–µ—à—å —Å—Å—ã–ª–∫–∏)
GUIDES: List[Dict[str, str]] = [
    {"title": "1) –û—Å–Ω–æ–≤—ã –∏ —ç—Ç–∏–∫–∞",        "url": "https://example.com/guide1"},
    {"title": "2) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å",     "url": "https://example.com/guide2"},
    {"title": "3) –ü—Ä–µ–¥–º–µ—Ç",               "url": "https://example.com/guide3"},
    {"title": "4) –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",     "url": "https://example.com/guide4"},
]

# –ó–∞–¥–∞–Ω–∏—è ‚Äî –∑–∞–≥–ª—É—à–∫–∏ (–ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –≥–∞–π–¥–∞–º)
TASKS: List[Dict[str, str]] = [
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 1", "text": "–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è 1: [—Å—Å—ã–ª–∫–∞]"},
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 2", "text": "–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è 2: [—Å—Å—ã–ª–∫–∞]"},
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 3", "text": "–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è 3 (–ø–æ –ø—Ä–µ–¥–º–µ—Ç—É): [—Å—Å—ã–ª–∫–∞]"},
    {"title": "–ó–∞–¥–∞–Ω–∏–µ –∫ –≥–∞–π–¥—É 4", "text": "–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è 4: [—Å—Å—ã–ª–∫–∞]"},
]

# –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≥–∞–π–¥–æ–≤ (–ú–°–ö)
SEND_HOUR = 8
SEND_MINUTE = 0

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º –æ —Å–¥–∞—á–µ –∑–∞–¥–∞–Ω–∏—è (–ú–°–ö)
REMIND_HOUR = 21
REMIND_MINUTE = 0

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ª–µ—Ç–Ω–∏–∫–∞–º –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –Ω–∞ —Ç–µ—Å—Ç (–ú–°–ö)
SUMMER_REMIND_HOUR = 20
SUMMER_REMIND_MINUTE = 0

TZ_MOSCOW = pytz.timezone("Europe/Moscow")

# –ö–∞—Ç–∞–ª–æ–≥–∏/—Ñ–∞–π–ª—ã
DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
EXPORT_CSV = os.path.join(DATA_DIR, "export.csv")
os.makedirs(DATA_DIR, exist_ok=True)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–∫–Ω–æ–ø–∫–∏)
SUBJECTS = [
    "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞"
]


# ======================= –ú–û–î–ï–õ–ò =======================

@dataclass
class Progress:
    role: str = ""              # "novice" | "summer"
    fio: str = ""
    subject: str = ""
    # –ù–æ–≤–∏—á–∫–∏:
    current_day: int = 0        # —Å–∫–æ–ª—å–∫–æ –≥–∞–π–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (0..len(GUIDES))
    guide_sent_dates: List[str] = None
    guide_read_dates: List[str] = None
    task_given_dates: List[str] = None
    task_done_dates: List[str] = None
    awaiting_read_confirm: bool = False
    last_guide_sent_date: str = ""  # YYYY-MM-DD (–∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–∞–π–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω)
    # –õ–µ—Ç–Ω–∏–∫–∏:
    summer_assigned_at: str = ""    # ISO-–≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã–¥–∞–ª–∏ —Ç–µ—Å—Ç
    summer_deadline: str = ""       # ISO-–≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ —Ç–µ—Å—Ç–∞ (assign+24—á)
    summer_reminded: bool = False   # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏?
    # –û–±—â–∏–µ:
    last_update: str = ""

    def __post_init__(self):
        self.guide_sent_dates = self.guide_sent_dates or []
        self.guide_read_dates = self.guide_read_dates or []
        self.task_given_dates = self.task_given_dates or []
        self.task_done_dates = self.task_done_dates or []
        if not self.last_update:
            self.last_update = datetime.now(TZ_MOSCOW).isoformat()


# ======================= –•–†–ê–ù–ò–õ–ò–©–ï =======================

def load_users() -> Dict[str, Dict[str, Any]]:
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_users(db: Dict[str, Dict[str, Any]]) -> None:
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def get_user(db: Dict[str, Dict[str, Any]], user_id: int) -> Progress:
    uid = str(user_id)
    if uid not in db:
        db[uid] = asdict(Progress())
    return Progress(**db[uid])

def upsert_user(db: Dict[str, Dict[str, Any]], user_id: int, p: Progress) -> None:
    db[str(user_id)] = asdict(p)
    save_users(db)


# ======================= FSM =======================

class RegStates(StatesGroup):
    waiting_role = State()
    waiting_summer_code = State()
    waiting_fio = State()
    waiting_subject = State()


# ======================= –ö–õ–ê–í–ò–ê–¢–£–†–´ =======================

def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–Ø –Ω–æ–≤–∏—á–æ–∫"), KeyboardButton(text="–Ø –ª–µ—Ç–Ω–∏–∫")],
            [KeyboardButton(text="üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥"), KeyboardButton(text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")],
        ],
        resize_keyboard=True
    )

def subjects_kb() -> ReplyKeyboardMarkup:
    # 2-3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    rows = []
    row = []
    for s in SUBJECTS:
        row.append(KeyboardButton(text=s))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# ======================= –£–¢–ò–õ–ò–¢–´ =======================

def today_date() -> date:
    return datetime.now(TZ_MOSCOW).date()

def today_str() -> str:
    return today_date().isoformat()

def is_today(dates: List[str]) -> bool:
    return today_str() in (dates or [])

def next_run_delay_sec(hour: int, minute: int) -> float:
    now = datetime.now(TZ_MOSCOW)
    run_at = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if run_at <= now:
        run_at += timedelta(days=1)
    return (run_at - now).total_seconds()

async def send_guide_if_due(bot: Bot, uid: int, db: Dict[str, Dict[str, Any]]) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–∏—á–∫—É –≥–∞–π–¥ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏:
    - –æ–Ω –Ω–æ–≤–∏—á–æ–∫
    - –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –≤—Å–µ –≥–∞–π–¥—ã
    - —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
    - –Ω–µ—Ç –≤–∏—Å—è—â–µ–≥–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
    - –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    """
    p = get_user(db, uid)
    if p.role != "novice":
        return
    if p.current_day >= len(GUIDES):
        return
    if is_today(p.guide_sent_dates):
        return
    if p.awaiting_read_confirm:
        return
    # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤—ã–¥–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ ‚Äî –∂–¥—ë–º –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if is_today(p.task_given_dates) and not is_today(p.task_done_dates):
        return

    guide = GUIDES[p.current_day]
    await bot.send_message(
        uid,
        f"üìñ –¢–≤–æ–π –≥–∞–π–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n<b>{guide['title']}</b>\n{guide['url']}\n\n"
        f"–ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥¬ª, –∏ —è –ø—Ä–∏—à–ª—é –∑–∞–¥–∞–Ω–∏–µ.",
        parse_mode=ParseMode.HTML,
        reply_markup=main_kb()
    )
    p.guide_sent_dates.append(today_str())
    p.last_guide_sent_date = today_str()
    p.awaiting_read_confirm = True
    p.last_update = datetime.now(TZ_MOSCOW).isoformat()
    upsert_user(db, uid, p)

async def catchup_after_reboot(bot: Bot):
    """
    –î–æ–≥–æ–Ω—è–ª–∫–∞ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ: –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ –ø–æ—Å–ª–µ 08:00,
    –∞ —É –Ω–æ–≤–∏—á–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≥–∞–π–¥ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
    """
    db = load_users()
    now = datetime.now(TZ_MOSCOW)
    if now.hour > SEND_HOUR or (now.hour == SEND_HOUR and now.minute >= SEND_MINUTE):
        for uid in list(db.keys()):
            try:
                await send_guide_if_due(bot, int(uid), db)
            except Exception:
                continue

# ======================= –§–û–ù–´ =======================

async def daily_broadcast(bot: Bot):
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≥–∞–π–¥–æ–≤ –≤ 08:00 –ú–°–ö
    while True:
        await asyncio.sleep(next_run_delay_sec(SEND_HOUR, SEND_MINUTE))
        db = load_users()
        for uid in list(db.keys()):
            try:
                await send_guide_if_due(bot, int(uid), db)
            except Exception:
                continue

async def daily_reminders(bot: Bot):
    # 21:00 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–æ–≤–∏—á–∫–∞–º, —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, –Ω–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    while True:
        await asyncio.sleep(next_run_delay_sec(REMIND_HOUR, REMIND_MINUTE))
        db = load_users()
        for uid, raw in db.items():
            try:
                p = Progress(**raw)
                if p.role == "novice":
                    if is_today(p.task_given_dates) and not is_today(p.task_done_dates):
                        await bot.send_message(int(uid),
                            "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –¥–æ 22:00 (–ú–°–ö) –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ï—Å–ª–∏ —Å–¥–µ–ª–∞–ª ‚Äî –Ω–∞–∂–º–∏ ¬´‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ¬ª.",
                            reply_markup=main_kb()
                        )
                # –õ–µ—Ç–Ω–∏–∫–∏: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ —Ç–µ—Å—Ç–∞ (24—á c –º–æ–º–µ–Ω—Ç–∞ –≤—ã–¥–∞—á–∏)
                if p.role == "summer" and p.summer_deadline and not p.summer_reminded:
                    try:
                        deadline = datetime.fromisoformat(p.summer_deadline)
                        now = datetime.now(TZ_MOSCOW)
                        # –Ω–∞–ø–æ–º–Ω–∏–º –∑–∞ ~2 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (—É—Å–ª–æ–≤–Ω–æ –≤ 20:00)
                        if now >= deadline - timedelta(hours=2) and now < deadline:
                            await bot.send_message(int(uid),
                                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ª–µ—Ç–Ω–∏–∫–∞.\n–°—Å—ã–ª–∫–∞: {SUMMER_TEST_LINK}"
                            )
                            p.summer_reminded = True
                            upsert_user(db, int(uid), p)
                    except Exception:
                        pass
            except Exception:
                continue

# ======================= –ë–û–¢ =======================

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ---------- /start ----------

@dp.message(CommandStart())
async def on_start(m: Message, state: FSMContext):
    db = load_users()
    p = get_user(db, m.from_user.id)
    upsert_user(db, m.from_user.id, p)

    await state.clear()
    await state.set_state(RegStates.waiting_role)
    await m.answer(
        "–ø—Ä–∏–≤–µ—Ç! —è –±–æ—Ç-–∫—É—Ä–∞—Ç–æ—Ä.\n\n–≤—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=main_kb()
    )

# ---------- –≤—ã–±–æ—Ä —Ä–æ–ª–∏ ----------

@dp.message(F.text.lower() == "—è –ª–µ—Ç–Ω–∏–∫")
async def choose_summer(m: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_summer_code)
    await m.answer("–≤–≤–µ–¥–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")

@dp.message(F.text.lower() == "—è –Ω–æ–≤–∏—á–æ–∫")
async def choose_novice(m: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_fio)
    await m.answer("–æ–∫–µ–π. –≤–≤–µ–¥–∏ —Å–≤–æ—ë —Ñ–∏–æ (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):")

@dp.message(RegStates.waiting_summer_code)
async def summer_check_code(m: Message, state: FSMContext):
    if (m.text or "").strip().lower() != SUMMER_CODE.lower():
        await m.answer("‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(role="summer")
    await state.set_state(RegStates.waiting_fio)
    await m.answer("–∫–æ–¥ –≤–µ—Ä–Ω—ã–π. –≤–≤–µ–¥–∏ —Å–≤–æ—ë —Ñ–∏–æ (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π):")

@dp.message(RegStates.waiting_fio)
async def reg_fio(m: Message, state: FSMContext):
    fio = (m.text or "").strip()
    if len(fio) < 2:
        await m.answer("–≤–≤–µ–¥–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Ñ–∏–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        return
    await state.update_data(fio=fio)
    await state.set_state(RegStates.waiting_subject)
    await m.answer("–≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subjects_kb())

@dp.message(RegStates.waiting_subject)
async def reg_subject(m: Message, state: FSMContext):
    subject = (m.text or "").strip()
    if subject not in SUBJECTS:
        await m.answer("–≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=subjects_kb())
        return

    data = await state.get_data()
    fio = data.get("fio", "")
    role_flag = data.get("role", "novice")

    db = load_users()
    p = get_user(db, m.from_user.id)
    p.fio = fio
    p.subject = subject
    p.last_update = datetime.now(TZ_MOSCOW).isoformat()

    if role_flag == "summer":
        p.role = "summer"
        # –≤—ã–¥–∞—ë–º —Å—Ä–∞–∑—É –≤—Å–µ –≥–∞–π–¥—ã + —Ç–µ—Å—Ç –∏ —Å—Ç–∞–≤–∏–º –¥–µ–¥–ª–∞–π–Ω 24 —á–∞—Å–∞
        now = datetime.now(TZ_MOSCOW)
        p.summer_assigned_at = now.isoformat()
        p.summer_deadline = (now + timedelta(hours=24)).isoformat()
        upsert_user(db, m.from_user.id, p)

        guides_list = "\n".join([f"‚Ä¢ {g['title']}: {g['url']}" for g in GUIDES])
        await state.clear()
        await m.answer(
            f"–≥–æ—Ç–æ–≤–æ, {p.fio}! —Ç—ã –ª–µ—Ç–Ω–∏–∫ ({p.subject}).\n\n"
            f"–≤–æ—Ç –≤—Å–µ –≥–∞–π–¥—ã —Å—Ä–∞–∑—É:\n{guides_list}\n\n"
            f"—Ç–µ—Å—Ç (24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è):\n{SUMMER_TEST_LINK}",
            reply_markup=main_kb()
        )
    else:
        p.role = "novice"
        upsert_user(db, m.from_user.id, p)
        await state.clear()
        await m.answer(
            f"–æ—Ç–ª–∏—á–Ω–æ, {p.fio}! —Ç—ã –Ω–æ–≤–∏—á–æ–∫ ({p.subject}).\n"
            f"–ø–µ—Ä–≤—ã–π –≥–∞–π–¥ –ø—Ä–∏–¥—ë—Ç –≤ {SEND_HOUR:02d}:{SEND_MINUTE:02d} (–º—Å–∫). "
            f"–ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∂–º–∏ ¬´üìñ —è –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥¬ª, —Ç–æ–≥–¥–∞ –ø—Ä–∏—à–ª—é –∑–∞–¥–∞–Ω–∏–µ.",
            reply_markup=main_kb()
        )

# ---------- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ----------

@dp.message(F.text == "üìñ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –≥–∞–π–¥")
async def confirm_read(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)

    if p.role != "novice":
        await m.answer("—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤. –¥–ª—è –ª–µ—Ç–Ω–∏–∫–æ–≤ ‚Äî —Ç–µ—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ.")
        return
    if not p.awaiting_read_confirm:
        await m.answer("—Å–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Å—å –≥–∞–π–¥–∞ –∏ –ø—Ä–æ—á–∏—Ç–∞–π –µ–≥–æ. –≥–∞–π–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 08:00 –ø–æ –º–æ—Å–∫–≤–µ.")
        return

    p.awaiting_read_confirm = False
    p.guide_read_dates.append(today_str())

    # –≤—ã–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é (–∏–Ω–¥–µ–∫—Å = p.current_day)
    day_idx = p.current_day
    if day_idx < len(TASKS):
        task = TASKS[day_idx]
        await m.answer(
            f"üìù –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è:\n<b>{task['title']}</b>\n{task['text']}",
            parse_mode=ParseMode.HTML,
            reply_markup=main_kb()
        )
        p.task_given_dates.append(today_str())
    else:
        await m.answer("–≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–¥–∞–Ω—ã. üî•")

    p.last_update = datetime.now(TZ_MOSCOW).isoformat()
    upsert_user(db, m.from_user.id, p)

@dp.message(F.text == "‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ")
async def task_done(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)

    if p.role != "novice":
        await m.answer("—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.")
        return

    # –º–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏–µ –≤—ã–¥–∞–≤–∞–ª–æ—Å—å
    if not is_today(p.task_given_dates):
        await m.answer("—Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ (–ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –≥–∞–π–¥–∞).")
        return

    if is_today(p.task_done_dates):
        await m.answer("—è —É–∂–µ –∑–∞–ø–∏—Å–∞–ª, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è. üëå")
        return

    p.task_done_dates.append(today_str())
    p.current_day = min(p.current_day + 1, len(GUIDES))
    p.last_update = datetime.now(TZ_MOSCOW).isoformat()
    upsert_user(db, m.from_user.id, p)

    if p.current_day >= len(GUIDES):
        await m.answer("–æ—Ç–ª–∏—á–Ω–æ! —Ç—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –≥–∞–π–¥—ã –∏ –∑–∞–¥–∞–Ω–∏—è. üéâ")
    else:
        await m.answer("–∑–∞–ø–∏—Å–∞–ª! –∂–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ –∑–∞–≤—Ç—Ä–∞ –≤ 08:00 (–º—Å–∫).")

# ---------- –ø—Ä–æ–≥—Ä–µ—Å—Å ----------

@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
@dp.message(Command("progress"))
async def my_progress(m: Message):
    db = load_users()
    p = get_user(db, m.from_user.id)
    if not p.role:
        await m.answer("—Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –Ω–∞–∂–º–∏ ¬´—è –Ω–æ–≤–∏—á–æ–∫¬ª –∏–ª–∏ ¬´—è –ª–µ—Ç–Ω–∏–∫¬ª.")
        return

    if p.role == "summer":
        deadline_txt = p.summer_deadline or "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        await m.answer(
            "—Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å: –ª–µ—Ç–Ω–∏–∫\n"
            f"—Ñ–∏–æ: {p.fio}\n–ø—Ä–µ–¥–º–µ—Ç: {p.subject}\n"
            f"—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç: {SUMMER_TEST_LINK}\n"
            f"–¥–µ–¥–ª–∞–π–Ω: {deadline_txt}",
            reply_markup=main_kb()
        )
        return

    total = len(GUIDES)
    done = p.current_day
    guide_today = "–¥–∞" if is_today(p.guide_sent_dates) else "–Ω–µ—Ç"
    task_today = "–¥–∞" if is_today(p.task_given_dates) else "–Ω–µ—Ç"
    task_done = "–¥–∞" if is_today(p.task_done_dates) else "–Ω–µ—Ç"
    await m.answer(
        "—Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å: –Ω–æ–≤–∏—á–æ–∫\n"
        f"—Ñ–∏–æ: {p.fio}\n–ø—Ä–µ–¥–º–µ—Ç: {p.subject}\n"
        f"–ø—Ä–æ–π–¥–µ–Ω–æ –¥–Ω–µ–π: {done} –∏–∑ {total}\n"
        f"–≥–∞–π–¥ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {guide_today}\n"
        f"–∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–Ω–æ: {task_today}\n"
        f"–∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_done}\n"
        f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {p.last_update}",
        reply_markup=main_kb()
    )

# ---------- –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ----------

def is_admin(uid: int) -> bool:
    return uid == ADMIN_ID

@dp.message(Command("admin"))
async def admin_panel(m: Message):
    if not is_admin(m.from_user.id):
        return
    db = load_users()
    total = len(db)
    novices = sum(1 for u in db.values() if u.get("role") == "novice")
    summers = sum(1 for u in db.values() if u.get("role") == "summer")

    lines = [
        f"üëë –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        f"–≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}",
        f"–Ω–æ–≤–∏—á–∫–∏: {novices}, –ª–µ—Ç–Ω–∏–∫–∏: {summers}",
        "",
        "—Å–ø–∏—Å–æ–∫:"
    ]
    for uid, raw in db.items():
        p = Progress(**raw)
        if p.role == "novice":
            lines.append(
                f"- {uid} | –Ω–æ–≤–∏—á–æ–∫ | {p.fio} | {p.subject} | –¥–µ–Ω—å {p.current_day}/{len(GUIDES)} | "
                f"–≥–∞–π–¥ —Å–µ–≥–æ–¥–Ω—è: {'+' if is_today(p.guide_sent_dates) else '-'} | "
                f"–∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è: {'+' if is_today(p.task_given_dates) else '-'} | "
                f"–≤—ã–ø–æ–ª–Ω–∏–ª: {'+' if is_today(p.task_done_dates) else '-'}"
            )
        elif p.role == "summer":
            lines.append(
                f"- {uid} | –ª–µ—Ç–Ω–∏–∫ | {p.fio} | {p.subject} | –¥–µ–¥–ª–∞–π–Ω: {p.summer_deadline or '-'}"
            )

    txt = "\n".join(lines)
    # —Ç–µ–ª–µ–≥—Ä–∞–º —Ä–µ–∂–µ—Ç >4–∫ —Å–∏–º–≤–æ–ª–æ–≤; –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ ‚Äî —à–ª—ë–º —á–∞—Å—Ç—è–º–∏
    MAX = 3500
    for i in range(0, len(txt), MAX):
        await m.answer(txt[i:i+MAX])

@dp.message(Command("export"))
async def export_csv(m: Message):
    if not is_admin(m.from_user.id):
        return
    db = load_users()
    headers = [
        "user_id", "role", "fio", "subject",
        "current_day", "guide_sent_dates", "guide_read_dates",
        "task_given_dates", "task_done_dates",
        "summer_assigned_at", "summer_deadline", "summer_reminded",
        "last_update"
    ]
    with open(EXPORT_CSV, "w", encoding="utf-8", newline="") as f:
        w = csv.writer(f, delimiter=";")
        w.writerow(headers)
        for uid, raw in db.items():
            p = Progress(**raw)
            w.writerow([
                uid, p.role, p.fio, p.subject,
                p.current_day,
                ",".join(p.guide_sent_dates),
                ",".join(p.guide_read_dates),
                ",".join(p.task_given_dates),
                ",".join(p.task_done_dates),
                p.summer_assigned_at, p.summer_deadline, p.summer_reminded,
                p.last_update
            ])
    await m.answer("csv —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ data/export.csv ‚Äî —Å–∫–∞—á–∞–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")

# ======================= –ó–ê–ü–£–°–ö =======================

async def main():
    # —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: –¥–æ–≥–æ–Ω—è–ª–∫–∞, –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await catchup_after_reboot(bot)
    asyncio.create_task(daily_broadcast(bot))
    asyncio.create_task(daily_reminders(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
